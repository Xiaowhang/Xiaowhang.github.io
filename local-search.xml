<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue Router</title>
    <link href="/archives/1237244176/"/>
    <url>/archives/1237244176/</url>
    
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><figure class="highlight bash"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-85n3cfm2bpjx5i"></i><span>Bash</span><div class="collapse show" id="collapse-85n3cfm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">npm install vue-router<br></code></pre></td></tr></table></div></figure><h2 id="基本使用">基本使用</h2><h3 id="创建路由实例">创建路由实例</h3><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-6uwloum2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-6uwloum2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/HomeView.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AboutView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/AboutView.vue&#x27;</span>;<br><br><span class="hljs-comment">// 配置路由</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">AboutView</span> &#125;,<br>];<br><br><span class="hljs-comment">// 创建路由实例</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(), <span class="hljs-comment">// HTML5模式</span><br>  routes, <span class="hljs-comment">// 路由配置</span><br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br><br></code></pre></td></tr></table></div></figure><h3 id="注册路由插件">注册路由插件</h3><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-08kbxfm2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-08kbxfm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>;<br><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>); <span class="hljs-comment">// use() 需要在 mount() 之前调用</span><br><br></code></pre></td></tr></table></div></figure><p>插件的功能有：</p><ul><li>全局注册 <code>RouterView</code> 和 <code>RouterLink</code>组件。</li><li>添加全局 <code>$router</code> 和 <code>$route</code> 属性。</li><li>启用 <code>useRouter()</code> 和 <code>useRoute()</code>组合式函数。</li><li>触发路由器解析初始路由。</li></ul><h3 id="使用路由">使用路由</h3><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-h9vj9tm2bpjx5i"></i><span>Vue</span><div class="collapse show" id="collapse-h9vj9tm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;p&gt;&lt;strong&gt;当前路由路径为&lt;/strong&gt; &#123;&#123; $route.fullPath &#125;&#125;&lt;/p&gt;<br>  &lt;!-- 导航区 --&gt;<br>  &lt;nav&gt;<br>    &lt;router-link to=&quot;/&quot;&gt;Go to Home&lt;/router-link&gt;<br>    &lt;router-link to=&quot;/about&quot;&gt;Go to About&lt;/router-link&gt;<br>  &lt;/nav&gt;<br>  &lt;!-- 主体区 --&gt;<br>  &lt;main&gt;<br>    &lt;router-view /&gt;<br>  &lt;/main&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><p>使用 <code>router-link</code> 组件创建链接，使得 Vue Router能够在不重新加载页面的情况下改变 URL，处理 URL的生成、编码和其他功能。</p><p><code>RouterView</code> 组件可以使 Vue Router知道你想要在哪里渲染当前 URL路径对应的<strong>路由组件</strong>。它需要在某处被导入，否则 Vue Router就不会渲染任何东西。</p><h3 id="注意">注意</h3><blockquote><ol type="1"><li>路由组件通常存放在 <code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在 <code>components</code> 文件夹。</li><li>通过点击导航，视觉效果上“消失”了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</li></ol></blockquote><h2 id="不同的历史模式">不同的历史模式</h2><p>在创建路由器实例时，<code>history</code>配置允许我们在不同的历史模式中进行选择。</p><h3 id="hash-模式">Hash 模式</h3><ul><li>优点：兼容性更好，因为不需要服务器端处理路径。</li><li>缺点：URL 带有 <code>#</code> 不太美观，且在 SEO优化方面相对较差。如：<code>https://example.com/#/user/id</code></li></ul><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-4p8d8pm2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-4p8d8pm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">//...</span><br>  ],<br>&#125;)<br></code></pre></td></tr></table></div></figure><h3 id="html5-模式">HTML5 模式</h3><ul><li>优点：URL 更加美观，不带有 <code>#</code>，更接近传统的网站URL。如：<code>https://example.com/user/id</code></li><li>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</li></ul><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-x12ctum2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-x12ctum2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">//...</span><br>  ],<br>&#125;)<br></code></pre></td></tr></table></div></figure><h2 id="to的两种写法">to的两种写法</h2><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-pywhnvm2bpjx5i"></i><span>VUE</span><div class="collapse show" id="collapse-pywhnvm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs VUE">&lt;!-- 第一种：to的字符串写法 --&gt;<br>&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;<br><br>&lt;!-- 第二种：to的对象写法 --&gt;<br>&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;<br></code></pre></td></tr></table></div></figure><h2 id="嵌套路由">嵌套路由</h2><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-9zwaosm2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-9zwaosm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/:username&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,<br>      <span class="hljs-attr">children</span>: [<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserHome</span> &#125;, <span class="hljs-comment">// User 组件的默认子路由</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserProfile</span> &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;posts&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserPosts</span> &#125;,<br>      ],<br>    &#125;,<br>  ],<br>&#125;);<br><br></code></pre></td></tr></table></div></figure><blockquote><p><strong>注意，以 <code>/</code>开头的嵌套路径将被视为根路径。嵌套的子路由不能 <code>/</code>开头</strong></p></blockquote><h2 id="命名路由">命名路由</h2><p>当创建一个路由时，可以选择给路由一个 <code>name</code>：</p><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-q9jq6sm2bpjx5i"></i><span>TYpeScript</span><div class="collapse show" id="collapse-q9jq6sm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TYpeScript"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:username&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;profile&#x27;</span>, <br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span><br>  &#125;<br>]<br></code></pre></td></tr></table></div></figure><p>然后可以使用 <code>name</code> 而不是 <code>path</code> 来传递<code>to</code> 属性给 <code>&lt;router-link&gt;</code>：</p><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-m7sbjnm2bpjx5i"></i><span>Vue</span><div class="collapse show" id="collapse-m7sbjnm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;router-link :to=&quot;&#123; name: &#x27;profile&#x27;, params: &#123; username: &#x27;xiaowhang&#x27; &#125; &#125;&quot;&gt;<br>  User profile<br>&lt;/router-link&gt;<br></code></pre></td></tr></table></div></figure><h3 id="优点">优点</h3><ul><li>没有硬编码的 URL。</li><li><code>params</code> 的自动编码/解码。</li><li>防止你在 URL 中出现打字错误。</li><li>绕过路径排序，例如展示一个匹配相同路径但排序较低的路由。</li></ul><h3 id="注意-1">注意</h3><blockquote><p>所有路由的命名<strong>都必须是唯一的</strong>。如果为多条路由添加相同的命名，路由器只会保留最后那一条。</p></blockquote><h2 id="路由组件传参">路由组件传参</h2><h3 id="query参数">query参数</h3><p>传递参数：</p><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-mn6nomm2bpjx5i"></i><span>Vue</span><div class="collapse show" id="collapse-mn6nomm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;<br>&lt;router-link to=&quot;/users?id=xiaowhang&amp;b=2&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;<br>&lt;router-link<br>  :to=&quot;&#123;<br>    // name:&#x27;user&#x27;, // 用name也可以跳转<br>    path: &#x27;/users&#x27;,<br>    query: &#123; id: &#x27;xiaowhang&#x27;, b: 2 &#125;,<br>  &#125;&quot;<br>&gt;<br>  跳转<br>&lt;/router-link&gt;<br></code></pre></td></tr></table></div></figure><p>接收参数：</p><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-lwjoddm2bpjx5i"></i><span>Vue</span><div class="collapse show" id="collapse-lwjoddm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; $route.query &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;!-- 或者 --&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; route.query &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>  import &#123; useRoute &#125; from &#x27;vue-router&#x27;;<br>  const route = useRoute();<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></div></figure><h3 id="params参数">params参数</h3><p>传递参数：</p><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-7qpn0fm2bpjx5i"></i><span>Vue</span><div class="collapse show" id="collapse-7qpn0fm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;!-- <br>    routes: [&#123;<br>      path: &#x27;/users/:username/:b&#x27;,<br>      component: User,<br>      &#125;,<br>    ],<br>--&gt;<br><br>&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;<br>&lt;router-link to=&quot;/users/xiaowhang/2&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;<br>&lt;router-link<br>  :to=&quot;&#123;<br>    name:&#x27;user&#x27;,<br>    params: &#123; id: &#x27;xiaowhang&#x27;, b: 2 &#125;,<br>  &#125;&quot;<br>&gt;<br>  跳转<br>&lt;/router-link&gt;<br></code></pre></td></tr></table></div></figure><p>接收参数：</p><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-h9ta37m2bpjx5i"></i><span>Vue</span><div class="collapse show" id="collapse-h9ta37m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; $route.params &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;!-- 或者 --&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; route.params &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>  import &#123; useRoute &#125; from &#x27;vue-router&#x27;;<br>  const route = useRoute();<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></div></figure><h4 id="注意-2">注意</h4><blockquote><ol type="1"><li>传递 <code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</li><li>传递 <code>params</code> 参数时，需要提前在规则中占位。</li></ol></blockquote><h3 id="将-props-传递给路由组件">将 props 传递给路由组件</h3><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-b9x5dam2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-b9x5dam2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/:id/:b&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,<br>  <span class="hljs-comment">// 布尔模式，作用：把收到了每一组params参数，作为props传给Detail组件</span><br>  <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span>,<br><br>  <span class="hljs-comment">// 对象模式，作用：把对象中的每一组key-value作为props传给Detail组件</span><br>  <span class="hljs-comment">// props: &#123; id: xiaowhang, b: 2, c: 3 &#125;,</span><br><br>  <span class="hljs-comment">// 函数模式，作用：把返回的对象中每一组key-value作为props传给Detail组件</span><br>  <span class="hljs-comment">// props: route =&gt; route.query,</span><br>&#125;,<br></code></pre></td></tr></table></div></figure><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-205iwbm2bpjx5i"></i><span>Vue</span><div class="collapse show" id="collapse-205iwbm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; id &#125;&#125;&lt;/div&gt;<br>  &lt;div&gt;&#123;&#123; b &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>  defineProps([&#x27;id&#x27;, &#x27;b&#x27;]);<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><h3 id="replace属性">replace属性</h3><ol type="1"><li><p>作用：控制路由跳转时操作浏览器历史记录的模式。</p></li><li><p>浏览器的历史记录有两种写入方式：分别为 <code>push</code> 和<code>replace</code>：</p><ul><li><code>push</code> 是追加历史记录（默认值）。</li><li><code>replace</code> 是替换当前记录。</li></ul></li><li><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-qov53nm2bpjx5i"></i><span>Vue</span><div class="collapse show" id="collapse-qov53nm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;router-link :to=&quot;...&quot; replace&gt;News&lt;/router-link&gt;<br></code></pre></td></tr></table></div></figure></li></ol><h2 id="编程式导航">编程式导航</h2><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ojbmlnm2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-ojbmlnm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>(); <span class="hljs-comment">// 获取当前路由信息</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>(); <span class="hljs-comment">// 获取路由实例</span><br></code></pre></td></tr></table></div></figure><h3 id="导航到不同的位置">导航到不同的位置</h3><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to="..."&gt;...&lt;/router-link&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-at1zyum2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-at1zyum2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 字符串路径</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/users/xiaowhang&#x27;</span>)<br><br><span class="hljs-comment">// 带有路径的对象</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/xiaowhang&#x27;</span> &#125;)<br><br><span class="hljs-comment">// 命名的路由，并加上参数，让路由建立 url</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;xiaowhang&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">// 带查询参数，结果是 /register?plan=private</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">plan</span>: <span class="hljs-string">&#x27;private&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">// 带 hash，结果是 /about#team</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;#team&#x27;</span> &#125;)<br><br><span class="hljs-keyword">const</span> username = <span class="hljs-string">&#x27;xiaowhang&#x27;</span><br><br><span class="hljs-comment">// 我们可以手动建立 url，但我们必须自己处理编码</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/user/<span class="hljs-subst">$&#123;username&#125;</span>`</span>) <span class="hljs-comment">// -&gt; /user/xiaowhang</span><br><br><span class="hljs-comment">// 同样</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">`/user/<span class="hljs-subst">$&#123;username&#125;</span>`</span> &#125;) <span class="hljs-comment">// -&gt; /user/xiaowhang</span><br><br><span class="hljs-comment">// 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; username &#125; &#125;) <span class="hljs-comment">// -&gt; /user/xiaowhang</span><br><br><span class="hljs-comment">// `params` 不能与 `path` 一起使用</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; username &#125; &#125;) <span class="hljs-comment">// -&gt; /user</span><br></code></pre></td></tr></table></div></figure><h3 id="替换当前位置">替换当前位置</h3><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to="..." replace&gt;...&lt;/router-link&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><p>也可以直接在传递给 <code>router.push</code> 的 <code>to</code>参数中增加一个属性 <code>replace: true</code> ：</p><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-42xdkfm2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-42xdkfm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<br><span class="hljs-comment">// 相当于</span><br>router.<span class="hljs-title function_">replace</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;)<br></code></pre></td></tr></table></div></figure><h3 id="横跨历史">横跨历史</h3><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-dktormm2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-dktormm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 向前移动一条记录，与 router.forward() 相同</span><br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">// 返回一条记录，与 router.back() 相同</span><br>router.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">// 前进 3 条记录</span><br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 如果没有那么多记录，静默失败</span><br>router.<span class="hljs-title function_">go</span>(-<span class="hljs-number">100</span>)<br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></div></figure><h2 id="重定向">重定向</h2><p>作用：将特定的路径，重新定向到已有路由。</p><p>从 <code>/</code> 重定向到 <code>/home</code> ：</p><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-acj5s5m2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-acj5s5m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> routes = [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;]<br></code></pre></td></tr></table></div></figure><p>重定向的目标也可以是一个命名的路由：</p><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-9rpylsm2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-9rpylsm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> routes = [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;homepage&#x27;</span> &#125; &#125;]<br></code></pre></td></tr></table></div></figure><p>也可以是一个方法，动态返回重定向目标：</p><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-to0pxfm2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-to0pxfm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-comment">// /search/screens -&gt; /search?q=screens</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search/:searchText&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-function"><span class="hljs-params">to</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">// 方法接收目标路由作为参数</span><br>      <span class="hljs-comment">// return 重定向的字符串路径/路径对象</span><br>      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">q</span>: to.<span class="hljs-property">params</span>.<span class="hljs-property">searchText</span> &#125; &#125;<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search&#x27;</span>,<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>]<br></code></pre></td></tr></table></div></figure><h3 id="相对重定向">相对重定向</h3><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-v3btm1m2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-v3btm1m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-comment">// 将总是把/users/123/posts重定向到/users/123/profile。</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/:id/posts&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-function"><span class="hljs-params">to</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">// 该函数接收目标路由作为参数</span><br>      <span class="hljs-comment">// 相对位置不以`/`开头</span><br>      <span class="hljs-comment">// 或 &#123; path: &#x27;profile&#x27;&#125;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;profile&#x27;</span><br>    &#125;,<br>  &#125;,<br>]<br></code></pre></td></tr></table></div></figure><h2 id="命名视图">命名视图</h2><p>有时候想同时 (同级)展示多个视图，而不是嵌套展示，例如创建一个布局，有 <code>sidebar</code>(侧导航) 和 <code>main</code> (主内容) 两个视图。</p><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-pcz09im2bpjx5i"></i><span>Vue</span><div class="collapse show" id="collapse-pcz09im2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;router-view class=&quot;view sidebar&quot; name=&quot;Sidebar&quot; /&gt;<br>  &lt;router-view class=&quot;view main-content&quot; /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用<code>components</code> 配置 (带上 <strong>s</strong>)：</p><figure class="highlight typescript"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-qtkvs8m2bpjx5i"></i><span>TypeScript</span><div class="collapse show" id="collapse-qtkvs8m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-comment">// 它们与 `&lt;router-view&gt;` 上的 `name` 属性匹配</span><br>        <span class="hljs-attr">default</span>: <span class="hljs-title class_">Home</span>,<br>        <span class="hljs-comment">// Sidebar: Sidebar 的缩写</span><br>        <span class="hljs-title class_">Sidebar</span>,<br>      &#125;,<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>路由</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SZTU Monthly 2024 Mar.</title>
    <link href="/archives/950106332/"/>
    <url>/archives/950106332/</url>
    
    <content type="html"><![CDATA[<blockquote><p><ahref="http://acm.sztu.edu.cn/csgoj/contest/problemset?cid=1052">比赛链接</a></p></blockquote><h2 id="写在前面">写在前面</h2><h3 id="题目难度">题目难度：</h3><p>这次比赛的题目都为蓝桥杯往年省赛的原题，难度中等以及中等偏下，不做具体细分。</p><p>题目难度都不大，但是由于蓝桥杯的赛制，应该尽量保证一次 <spanclass="math inline">\(AC\)</span></p><h2 id="a-移动距离">A 移动距离</h2><p>求出两点的坐标再求距离即可</p><p>需要注意的是在奇数行需要翻转</p><h3 id="ac-code">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-uqsi22m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-uqsi22m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> w, m, n;<br>    cin &gt;&gt; w &gt;&gt; m &gt;&gt; n;<br>    m--, n--;<br><br>    <span class="hljs-type">int</span> x = m % w, xx = n % w, y = m / w, yy = n / w;<br>    <span class="hljs-keyword">if</span> (y % <span class="hljs-number">2</span>)<br>        x = w - <span class="hljs-number">1</span> - x;<br>    <span class="hljs-keyword">if</span> (yy % <span class="hljs-number">2</span>)<br>        xx = w - <span class="hljs-number">1</span> - xx;<br><br>    cout &lt;&lt; <span class="hljs-built_in">abs</span>(x - xx) + <span class="hljs-built_in">abs</span>(y - yy);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b-等差数列">B 等差数列</h2><p>可以将数列排序成单调不减数列有：</p><p>任意两项之差都为公差 <span class="math inline">\(d\)</span>的倍数，故公差 <span class="math inline">\(d\)</span>​为所有相邻两项差的最大公约数</p><h3 id="ac-code-1">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-5ovmsbm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-5ovmsbm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a; &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; v[i];<br><br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-type">int</span> d = v[<span class="hljs-number">1</span>] - v[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        d = <span class="hljs-built_in">gcd</span>(d, v[i] - v[i - <span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">if</span> (d == <span class="hljs-number">0</span>)<br>        cout &lt;&lt; n;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; (v.<span class="hljs-built_in">back</span>() - v.<span class="hljs-built_in">front</span>()) / d + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c-解码">C 解码</h2><p>检查每个字母后面有没有数字，有就按题目要求输出</p><h3 id="ac-code-2">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ce4mg9m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-ce4mg9m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isdigit</span>(s[i]))<br>        &#123;<br>            <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; s.<span class="hljs-built_in">size</span>() &amp;&amp; <span class="hljs-built_in">isdigit</span>(s[i + <span class="hljs-number">1</span>]))<br>                num = s[i + <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; num; k++)<br>                cout &lt;&lt; s[i];<br>            <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)<br>                cout &lt;&lt; s[i];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d-饮料换购">D 饮料换购</h2><p>经典问题，按题目模拟即可</p><h3 id="ac-code-3">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-6km1jbm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-6km1jbm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n &gt;= <span class="hljs-number">3</span>)<br>    &#123;<br>        ans += n / <span class="hljs-number">3</span> * <span class="hljs-number">3</span>;<br>        n = n / <span class="hljs-number">3</span> + n % <span class="hljs-number">3</span>;<br>    &#125;<br><br>    cout &lt;&lt; ans + n &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e-全球变暖">E 全球变暖</h2><p><span class="math inline">\(BFS\)</span>每块岛屿，判断岛上是否存在一格满足上下左右都是<code>#</code>，存在则岛屿不会淹没。</p><h3 id="ac-code-4">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-hmtt5lm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-hmtt5lm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>vector&lt;string&gt; mp;<br><span class="hljs-type">bool</span> vis[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br>    vis[x][y] = <span class="hljs-literal">true</span>;<br>    q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> [x, y] = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> nx = x + dx[i];<br>            <span class="hljs-type">int</span> ny = y + dy[i];<br><br>            <span class="hljs-keyword">if</span> (nx &lt; <span class="hljs-number">0</span> || nx &gt;= n || ny &lt; <span class="hljs-number">0</span> || ny &gt;= n || mp[nx][ny] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">if</span> (mp[nx][ny] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                cnt++;<br><br>            <span class="hljs-keyword">if</span> (vis[nx][ny])<br>                <span class="hljs-keyword">continue</span>;<br><br>            vis[nx][ny] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(&#123;nx, ny&#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">4</span>)<br>            flag = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br><br>    mp.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; mp[i];<br><br>    <span class="hljs-type">int</span> id = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; !vis[i][j])<br>                ans += <span class="hljs-built_in">bfs</span>(i, j);<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f-时间显示">F 时间显示</h2><p>直接取余到时分秒即可</p><h3 id="ac-code-5">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-81f6qmm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-81f6qmm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br><br>    n %= <span class="hljs-number">1LL</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">int</span> h = n / (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>    n %= <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">int</span> m = n / (<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>    n %= <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">int</span> s = n / <span class="hljs-number">1000</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>, h, m, s);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// cin.tie(0)-&gt;ios::sync_with_stdio(false);</span><br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="g-修剪灌木">G 修剪灌木</h2><p>走到一端再走回来就是爱丽丝离开当前灌木最长的时间</p><h3 id="ac-code-6">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-j2yii0m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-j2yii0m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cout &lt;&lt; <span class="hljs-built_in">max</span>(n - i, i - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="h-乘法表">H 乘法表</h2><p>处理进制，用数组存表即可</p><h3 id="ac-code-7">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-rrm29cm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-rrm29cm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> p;<br><span class="hljs-type">char</span> mp[<span class="hljs-number">36</span>];<br><br><span class="hljs-function">string <span class="hljs-title">to_p</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    string res;<br>    <span class="hljs-keyword">while</span> (x)<br>    &#123;<br>        res += mp[x % p];<br>        x /= p;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; p;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        mp[i] = <span class="hljs-string">&#x27;0&#x27;</span> + i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">10</span>; i &lt; <span class="hljs-number">36</span>; i++)<br>        mp[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i - <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; p; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++)<br>            cout &lt;&lt; <span class="hljs-built_in">to_p</span>(i) &lt;&lt; <span class="hljs-string">&#x27;*&#x27;</span> &lt;&lt; <span class="hljs-built_in">to_p</span>(j) &lt;&lt; <span class="hljs-string">&#x27;=&#x27;</span> &lt;&lt; <span class="hljs-built_in">to_p</span>(i * j) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>SZTU_ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>SZTU_ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023年中国高校计算机大赛-团队程序设计天梯赛（GPLT）上海理工大学校内选拔赛</title>
    <link href="/archives/3300329301/"/>
    <url>/archives/3300329301/</url>
    
    <content type="html"><![CDATA[<h2 id="a.-a-xor-b-problem">A. A Xor B Problem</h2><h3 id="思路">思路</h3><p>记录每个数出现的次数，结果为每个数出现的次数的平方和</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-6utn04m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-6utn04m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(N)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        cnt[x]++;<br>    &#125;<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        ans += <span class="hljs-number">1LL</span> * cnt[i] * cnt[i];<br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b.-吃苹果">B. 吃苹果</h2><h3 id="思路-1">思路</h3><p>将每天按晚上吃和白天吃的愉悦值之差进行排序，选前 <spanclass="math inline">\(k\)</span> 个晚上吃，其他的白天吃</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-880jhjm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-880jhjm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">a</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i].first &gt;&gt; a[i].second;<br><br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), [](pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &amp;x, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &amp;y)<br>         &#123; <span class="hljs-keyword">return</span> x.second - x.first &gt; y.second - y.first; &#125;);<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; k)<br>            ans += a[i].second;<br>        <span class="hljs-keyword">else</span><br>            ans += a[i].first;<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c.-n皇后问题">C. n皇后问题</h2><h3 id="思路-2">思路</h3><p>每个皇后的攻击范围为</p><ul><li>行号相同</li><li>列号相同</li><li>行号和列号的差相同</li><li>行号和列号的和相同</li></ul><p>查询之前是否出现过即可</p><p>使用数组记录需考虑下标为负的情况</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-1efjgqm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-1efjgqm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, t;<br>    cin &gt;&gt; n &gt;&gt; t;<br>    unordered_set&lt;<span class="hljs-type">int</span>&gt; row, col, diag1, diag2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br><br>        <span class="hljs-keyword">if</span> (row.<span class="hljs-built_in">count</span>(x) || col.<span class="hljs-built_in">count</span>(y) || diag1.<span class="hljs-built_in">count</span>(x - y) || diag2.<span class="hljs-built_in">count</span>(x + y))<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        row.<span class="hljs-built_in">insert</span>(x);<br>        col.<span class="hljs-built_in">insert</span>(y);<br>        diag1.<span class="hljs-built_in">insert</span>(x - y);<br>        diag2.<span class="hljs-built_in">insert</span>(x + y);<br>        cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d.-分苹果">D. 分苹果</h2><h3 id="思路-3">思路</h3><p>高中线性规划问题，已知苹果不会在线的上，所以将苹果的坐标 <spanclass="math inline">\((x,y)\)</span> 代入直线方程 <spanclass="math inline">\(ax+by+c = 0\)</span> 中</p><p><span class="math inline">\(ax+by+c&gt;0\)</span> 和 <spanclass="math inline">\(ax+by+c&lt;0\)</span> 表示苹果在线的两侧</p><p>通过 <code>01串</code> 表示苹果在哪一块区域</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-f5308dm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-f5308dm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    vector&lt;tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">v</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        v[i] = &#123;a, b, c&#125;;<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        ll x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br><br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">auto</span> [a, b, c] = v[j];<br>            ll d = a * x + b * y + c;<br>            <span class="hljs-keyword">if</span> (d &gt; <span class="hljs-number">0</span>)<br>                flag |= <span class="hljs-number">1</span> &lt;&lt; j;<br>        &#125;<br>        ans[flag]++;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        cout &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e.-完型填空">E. 完型填空</h2><h3 id="思路-4">思路</h3><p>动态规划问题</p><p><code>dp[i][j][k][l]</code> 表示选择了 <spanclass="math inline">\(A,B,C,D\)</span> 四个选项分别选择了 <spanclass="math inline">\(i,j,k,l\)</span> 次的最大期望</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-57cmb7m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-57cmb7m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> dp[<span class="hljs-number">26</span>][<span class="hljs-number">26</span>][<span class="hljs-number">26</span>][<span class="hljs-number">26</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    vector&lt;array&lt;<span class="hljs-type">int</span>, 4&gt;&gt; <span class="hljs-built_in">v</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; v[i][<span class="hljs-number">0</span>] &gt;&gt; v[i][<span class="hljs-number">1</span>] &gt;&gt; v[i][<span class="hljs-number">2</span>] &gt;&gt; v[i][<span class="hljs-number">3</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n / <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n / <span class="hljs-number">4</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= n / <span class="hljs-number">4</span>; k++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l &lt;= n / <span class="hljs-number">4</span>; l++)<br>                &#123;<br>                    <span class="hljs-keyword">auto</span> [a, b, c, d] = v[i + j + k + l];<br>                    <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>)<br>                        dp[i][j][k][l] = <span class="hljs-built_in">max</span>(dp[i][j][k][l], dp[i - <span class="hljs-number">1</span>][j][k][l] + a);<br>                    <span class="hljs-keyword">if</span> (j != <span class="hljs-number">0</span>)<br>                        dp[i][j][k][l] = <span class="hljs-built_in">max</span>(dp[i][j][k][l], dp[i][j - <span class="hljs-number">1</span>][k][l] + b);<br>                    <span class="hljs-keyword">if</span> (k != <span class="hljs-number">0</span>)<br>                        dp[i][j][k][l] = <span class="hljs-built_in">max</span>(dp[i][j][k][l], dp[i][j][k - <span class="hljs-number">1</span>][l] + c);<br>                    <span class="hljs-keyword">if</span> (l != <span class="hljs-number">0</span>)<br>                        dp[i][j][k][l] = <span class="hljs-built_in">max</span>(dp[i][j][k][l], dp[i][j][k][l - <span class="hljs-number">1</span>] + d);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; dp[n / <span class="hljs-number">4</span>][n / <span class="hljs-number">4</span>][n / <span class="hljs-number">4</span>][n / <span class="hljs-number">4</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f.-坐火车">F. 坐火车</h2><h3 id="思路-5">思路</h3><p>通过 <span class="math inline">\(BFS\)</span> 计算出从 <spanclass="math inline">\(1\)</span> 到任何城市所需经历的最少城市数量</p><p>再使用 <span class="math inline">\(dijkstra\)</span>在经历最少城市数量的前提下寻找最短路，即对于 <spanclass="math inline">\(u \to v\)</span>，需要满足 <spanclass="math inline">\(d[v] = d[u] + 1\)</span>，其中 <spanclass="math inline">\(d[i]\)</span> 表示从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(i\)</span> 需要经历的最少城市数量</p><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-oh36orm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-oh36orm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    vector&lt;vector&lt;pair&lt;<span class="hljs-type">int</span>, ll&gt;&gt;&gt; <span class="hljs-built_in">g</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        g[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;);<br>        g[v].<span class="hljs-built_in">push_back</span>(&#123;u, w&#125;);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">d</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    function&lt;<span class="hljs-type">void</span>()&gt; bfs = [&amp;]()<br>    &#123;<br>        queue&lt;<span class="hljs-type">int</span>&gt; q;<br>        q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>        d[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [v, w] : g[u])<br>            &#123;<br>                <span class="hljs-keyword">if</span> (vis[v])<br>                    <span class="hljs-keyword">continue</span>;<br>                vis[v] = <span class="hljs-literal">true</span>;<br><br>                d[v] = d[u] + <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-built_in">bfs</span>();<br><br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">dis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>)</span></span>;<br>    function&lt;<span class="hljs-type">void</span>()&gt; dijkstra = [&amp;]()<br>    &#123;<br>        priority_queue&lt;<span class="hljs-type">int</span>&gt; q;<br>        q.<span class="hljs-built_in">push</span>(n);<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        dis[n] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">top</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (vis[u])<br>                <span class="hljs-keyword">continue</span>;<br>            vis[u] = <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [v, w] : g[u])<br>            &#123;<br>                <span class="hljs-keyword">if</span> (d[v] != d[u] - <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + w)<br>                &#123;<br>                    dis[v] = dis[u] + w;<br>                    q.<span class="hljs-built_in">push</span>(v);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-built_in">dijkstra</span>();<br><br>    cout &lt;&lt; d[n] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; dis[<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="g.-a-xor-b-problem-again">G. A Xor B Problem again</h2><h3 id="思路-6">思路</h3><p>如果两个数 <span class="math inline">\(a,\ b\)</span> 满足 <spanclass="math inline">\(a\oplus b = a +b\)</span>，则这两个数在二进制表示下没有位同时为 <spanclass="math inline">\(1\)</span></p><p>对于一个数 <span class="math inline">\(10110_{(2)}\)</span>可知满足条件的数有 <span class="math inline">\(01001_{(2)},\01000_{(2)},\ 00001_{(2)}\)</span>，而后面两个数都是前一个数的子集</p><p>故我们只需找出 <span class="math inline">\(11111_{(2)} \oplus10110_{(2)}\)</span> 的子集的大小即可</p><h3 id="code-6">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-36hqham2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-36hqham2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-number">200000</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        dp[a[i]]++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">17</span>); j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (j &amp; (<span class="hljs-number">1</span> &lt;&lt; i))<br>                dp[j] += dp[j ^ (<span class="hljs-number">1</span> &lt;&lt; i)];<br>        &#125;<br>    &#125;<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        ans += dp[((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">17</span>) - <span class="hljs-number">1</span>) ^ a[i]];<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="h.-摘苹果">H. 摘苹果</h2><h3 id="思路-7">思路</h3><p>线段树</p><ul><li><span class="math inline">\(num\)</span> 表示当前节点有多少苹果</li><li><span class="math inline">\(cnt\)</span>表示当前节点有多少课树的苹果数量小于 <spanclass="math inline">\(100\)</span></li><li><span class="math inline">\(flag\)</span>表示当前节点下没有可以采摘的苹果数</li></ul><h3 id="code-7">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-nlxrsxm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-nlxrsxm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    ll num, cnt;<br>    <span class="hljs-type">bool</span> flag;<br>&#125; seg[N * <span class="hljs-number">4</span>];<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(N)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span></span><br><span class="hljs-function"></span>&#123;<br>    seg[id].num = seg[id * <span class="hljs-number">2</span>].num + seg[id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>].num;<br>    seg[id].cnt = seg[id * <span class="hljs-number">2</span>].cnt + seg[id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>].cnt;<br>    seg[id].flag = seg[id * <span class="hljs-number">2</span>].flag &amp; seg[id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>].flag;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        seg[id].num = a[l];<br>        <span class="hljs-keyword">if</span> (seg[id].num &lt; <span class="hljs-number">100</span>)<br>            seg[id].cnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (seg[id].num &lt; <span class="hljs-number">10</span>)<br>            seg[id].flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">build</span>(id * <span class="hljs-number">2</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">update</span>(id);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> ql, <span class="hljs-type">int</span> qr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (seg[id].flag)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        seg[id].num = seg[id].num - (seg[id].num + <span class="hljs-number">2</span>) / <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">if</span> (seg[id].num &lt; <span class="hljs-number">100</span>)<br>            seg[id].cnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (seg[id].num &lt; <span class="hljs-number">10</span>)<br>            seg[id].flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (qr &lt;= mid)<br>        <span class="hljs-built_in">modify</span>(id * <span class="hljs-number">2</span>, l, mid, ql, qr);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ql &gt; mid)<br>        <span class="hljs-built_in">modify</span>(id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, ql, qr);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">modify</span>(id * <span class="hljs-number">2</span>, l, mid, ql, mid);<br>        <span class="hljs-built_in">modify</span>(id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, qr);<br>    &#125;<br>    <span class="hljs-built_in">update</span>(id);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">querycnt</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> ql, <span class="hljs-type">int</span> qr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == ql &amp;&amp; r == qr)<br>        <span class="hljs-keyword">return</span> seg[id].cnt;<br><br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (qr &lt;= mid)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">querycnt</span>(id * <span class="hljs-number">2</span>, l, mid, ql, qr);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ql &gt; mid)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">querycnt</span>(id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, ql, qr);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">querycnt</span>(id * <span class="hljs-number">2</span>, l, mid, ql, mid) + <span class="hljs-built_in">querycnt</span>(id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, qr);<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">querynum</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> ql, <span class="hljs-type">int</span> qr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == ql &amp;&amp; r == qr)<br>        <span class="hljs-keyword">return</span> seg[id].num;<br><br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (qr &lt;= mid)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">querynum</span>(id * <span class="hljs-number">2</span>, l, mid, ql, qr);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ql &gt; mid)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">querynum</span>(id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, ql, qr);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">querynum</span>(id * <span class="hljs-number">2</span>, l, mid, ql, mid) + <span class="hljs-built_in">querynum</span>(id * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, qr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> op, l, r;<br>        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>            cout &lt;&lt; <span class="hljs-built_in">querycnt</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r) &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>)<br>            cout &lt;&lt; <span class="hljs-built_in">querynum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r) &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Educational Codeforces Round 163 (Rated for Div. 2)</title>
    <link href="/archives/1513395789/"/>
    <url>/archives/1513395789/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://codeforces.com/contest/1948">Educational CodeforcesRound 163 (Rated for Div. 2)</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>只有两个相同的字符在一起，才算特殊字符，而三个相同的在一起，中间的不算特殊字符</p><p>故特殊字符是两两同时出现的。</p><p>当 <span class="math inline">\(n\)</span> 为奇数时不存在。</p><p>当 <span class="math inline">\(n\)</span>为偶数时每次出现两个相同的且与上一次不同的字符即可</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-0bgz92m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-0bgz92m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n / <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot;AA&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;BB&quot;</span>;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>从后往前判断，因为将一个数拆分只会变小，如果已经比后面的小，拆分的操作不会对后面有影响</p><p>如果需要拆分需判断拆分后是否合理</p><p>一直记录当前的大小即可</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-c408t7m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-c408t7m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-type">int</span> now = a[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; now)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i] / <span class="hljs-number">10</span> &gt; a[i] % <span class="hljs-number">10</span> || a[i] % <span class="hljs-number">10</span> &gt; now)<br>            &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                now = a[i] / <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            now = a[i];<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p><span class="math inline">\(BFS\)</span></p><p>特殊的是每次移动可以看作移动两次，一次是朝四个方向的，一次是按指示方向的</p><p>移动两次后再进队</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-1ayd3vm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-1ayd3vm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt; <span class="hljs-built_in">a</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;(n + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span>; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            cin &gt;&gt; a[i][j];<br><br>    vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">vis</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>));<br>    vector&lt;<span class="hljs-type">int</span>&gt; dx = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br>    vector&lt;<span class="hljs-type">int</span>&gt; dy = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> [x, y] = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">2</span> &amp;&amp; y == n)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> nx = x + dx[i];<br>            <span class="hljs-type">int</span> ny = y + dy[i];<br>            <span class="hljs-keyword">if</span> (nx &lt; <span class="hljs-number">1</span> || nx &gt; <span class="hljs-number">2</span> || ny &lt; <span class="hljs-number">1</span> || ny &gt; n || vis[nx][ny])<br>                <span class="hljs-keyword">continue</span>;<br>            vis[nx][ny] = <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-keyword">if</span> (nx == <span class="hljs-number">2</span> &amp;&amp; ny == n)<br>            &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (a[nx][ny] == <span class="hljs-string">&#x27;&lt;&#x27;</span>)<br>                ny--;<br>            <span class="hljs-keyword">else</span><br>                ny++;<br><br>            <span class="hljs-keyword">if</span> (nx &lt; <span class="hljs-number">1</span> || nx &gt; <span class="hljs-number">2</span> || ny &lt; <span class="hljs-number">1</span> || ny &gt; n || vis[nx][ny])<br>                <span class="hljs-keyword">continue</span>;<br>            vis[nx][ny] = <span class="hljs-literal">true</span>;<br><br>            q.<span class="hljs-built_in">push</span>(&#123;nx, ny&#125;);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>枚举每个长度，判断该长度能不能出现重复的字符串</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-rmr0kqm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-rmr0kqm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>; len &gt;= <span class="hljs-number">1</span>; len--)<br>    &#123;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i + len &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (s[i] != s[i + len] &amp;&amp; s[i] != <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; s[i + len] != <span class="hljs-string">&#x27;?&#x27;</span>)<br>            &#123;<br>                cnt = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            cnt++;<br>            <span class="hljs-keyword">if</span> (cnt == len)<br>            &#123;<br>                cout &lt;&lt; <span class="hljs-number">2</span> * len &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>因为 <span class="math inline">\(a[i] - a[j] \ge 1\)</span>故一组的长度最大为 <span class="math inline">\(k\)</span>，而这组的两端的数需要差值为 <span class="math inline">\(1\)</span>且和别的数的差值尽可能小故选择中间的两个数。</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-d8yq3vm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-d8yq3vm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        a[i] = i;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + k - <span class="hljs-number">1</span> &lt;= n; i += k)<br>    &#123;<br>        cnt++;<br>        <span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>() + i, a.<span class="hljs-built_in">begin</span>() + i + k / <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>() + i + k / <span class="hljs-number">2</span>, a.<span class="hljs-built_in">begin</span>() + i + k);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; i + k; j++)<br>            b[j] = cnt;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n % k)<br>    &#123;<br>        cnt++;<br>        <span class="hljs-keyword">if</span> (n % k &lt;= k / <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>() + n - (n % k) + <span class="hljs-number">1</span>, a.<span class="hljs-built_in">end</span>());<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>() + n - (n % k) + <span class="hljs-number">1</span>, a.<span class="hljs-built_in">begin</span>() + n - (n % k) + <span class="hljs-number">1</span> + k / <span class="hljs-number">2</span>);<br>            <span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>() + n - (n % k) + <span class="hljs-number">1</span> + k / <span class="hljs-number">2</span>, a.<span class="hljs-built_in">end</span>());<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - (n % k) + <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            b[i] = cnt;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cout &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f">F</h2><h3 id="思路-5">思路</h3><p>待补</p><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-kj5ig4m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-kj5ig4m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 933 (Div. 3)</title>
    <link href="/archives/744274538/"/>
    <url>/archives/744274538/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://codeforces.com/contest/1941">Codeforces Round 933(Div. 3)</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>数据量较小，遍历所有可能累加即可</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-wxybrkm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-wxybrkm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, k;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span>, <span class="hljs-title">b</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        cin &gt;&gt; b[i];<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i] + b[j] &lt;= k)<br>                ans++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>对于 <span class="math inline">\(a_{i-1}\ (2\le i\le n-1)\)</span>，想让 <span class="math inline">\(a_{i-1}\)</span> 变为 <spanclass="math inline">\(0\)</span> 只能对 <spanclass="math inline">\(a_{i}\)</span>操作，遍历所有的可能操作的索引，进行最优操作即使 <spanclass="math inline">\(a_{i-1}\)</span> 变为 <spanclass="math inline">\(0\)</span></p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ltyn85m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-ltyn85m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>    &#123;<br>        a[i] -= <span class="hljs-number">2</span> * a[i - <span class="hljs-number">1</span>];<br>        a[i + <span class="hljs-number">1</span>] -= a[i - <span class="hljs-number">1</span>];<br>        a[i - <span class="hljs-number">1</span>] -= a[i - <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">if</span> (a[i] &lt; <span class="hljs-number">0</span> || a[i + <span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;NO\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; (a[n] == <span class="hljs-number">0</span> &amp;&amp; a[n - <span class="hljs-number">1</span>] == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;YES\n&quot;</span> : <span class="hljs-string">&quot;NO\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>对于 <span class="math inline">\(map\)</span> 和 <spanclass="math inline">\(pie\)</span> 只需删除中间的 <spanclass="math inline">\(a\)</span> 和 <spanclass="math inline">\(i\)</span> 即可变为漂亮的。</p><p>对于 <span class="math inline">\(mapie\)</span> 需要删除中间 <spanclass="math inline">\(p\)</span> 即可变为漂亮的</p><p>所以我们只需找出 <span class="math inline">\(map\)</span> 和 <spanclass="math inline">\(pie\)</span> 的数量即可，特别的是如果一个 <spanclass="math inline">\(p\)</span> 同时被 <spanclass="math inline">\(map\)</span> 和 <spanclass="math inline">\(pie\)</span> 使用，优先给 <spanclass="math inline">\(map\)</span></p><p>故答案为 <spanclass="math inline">\(\mathrm{cnt}(map)+\mathrm{cnt}(pie)\)</span></p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-iq6ngrm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-iq6ngrm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    string s;<br>    cin &gt;&gt; n &gt;&gt; s;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; n - <span class="hljs-number">2</span> &amp;&amp; s.<span class="hljs-built_in">substr</span>(i, <span class="hljs-number">3</span>) == <span class="hljs-string">&quot;map&quot;</span> || s.<span class="hljs-built_in">substr</span>(i, <span class="hljs-number">3</span>) == <span class="hljs-string">&quot;pie&quot;</span>)<br>            ans++, i += <span class="hljs-number">2</span>;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>模拟题意，进行 <spanclass="math inline">\(BFS\)</span>，特别的是本题需要去重，故使用 <spanclass="math inline">\(set\)</span>，否则如果每次都给两个方向传球会 <spanclass="math inline">\(TLE\)</span></p><p>还需注意编号是从 <span class="math inline">\(1\)</span>开始的，要对取模后的 <span class="math inline">\(0\)</span>进行处理。</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-3nijg0m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-3nijg0m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, x;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;<br><br>    set&lt;<span class="hljs-type">int</span>&gt; now, tmp;<br>    now.<span class="hljs-built_in">insert</span>(x);<br><br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> d;<br>        <span class="hljs-type">char</span> flag;<br>        cin &gt;&gt; d &gt;&gt; flag;<br><br>        tmp.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> it : now)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-string">&#x27;0&#x27;</span> || flag == <span class="hljs-string">&#x27;?&#x27;</span>)<br>                tmp.<span class="hljs-built_in">insert</span>((it + n + d) % n);<br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-string">&#x27;1&#x27;</span> || flag == <span class="hljs-string">&#x27;?&#x27;</span>)<br>                tmp.<span class="hljs-built_in">insert</span>((it + n - d) % n);<br>        &#125;<br><br>        now = tmp;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (*now.<span class="hljs-built_in">begin</span>() == <span class="hljs-number">0</span>)<br>    &#123;<br>        now.<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>);<br>        now.<span class="hljs-built_in">insert</span>(n);<br>    &#125;<br><br>    cout &lt;&lt; now.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> it : now)<br>        cout &lt;&lt; it &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>动态规划，对每一行进行操作</p><p><span class="math inline">\(dp[i]\)</span> 表示当桥的长度为 <spanclass="math inline">\(i\)</span> 时的花费。</p><p>状态转移方程为：<span class="math inline">\(dp[i] = \min(dp[i-d-1],\dots, dp[i-1])+(a[i]+1)\)</span>，即从能搭过来的花费最小的支架搭到<span class="math inline">\(i\)</span></p><p>需要连续建造 <span class="math inline">\(k\)</span>座桥，故用前缀和优化</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-uvp89dm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-uvp89dm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, k, d;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; d;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">a</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            cin &gt;&gt; a[i][j];<br><br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">res</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">dp</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        multiset&lt;ll&gt; st = &#123;dp[<span class="hljs-number">1</span>]&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (j - d - <span class="hljs-number">1</span> - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">1</span>)<br>                st.<span class="hljs-built_in">erase</span>(st.<span class="hljs-built_in">find</span>(dp[j - d - <span class="hljs-number">1</span> - <span class="hljs-number">1</span>]));<br>            dp[j] = *st.<span class="hljs-built_in">begin</span>() + a[i][j] + <span class="hljs-number">1</span>;<br>            st.<span class="hljs-built_in">insert</span>(dp[j]);<br>        &#125;<br>        res[i] = dp[m];<br>    &#125;<br><br>    <span class="hljs-built_in">partial_sum</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>(), res.<span class="hljs-built_in">begin</span>());<br>    ll ans = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt;= n; i++)<br>        ans = <span class="hljs-built_in">min</span>(ans, res[i] - res[i - k]);<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f">F</h2><h3 id="思路-5">思路</h3><p>二分答案 <span class="math inline">\(d\)</span></p><p>对于每个相邻的问题，判断间隔是否大于 <spanclass="math inline">\(d\)</span>，如果大于 <spanclass="math inline">\(d\)</span> 则需要元素，记录有多少间隔过大。</p><p>如果只有一个间隔过大，我们要先判断间隔可能插入的元素大小，通过二分查找判断是否存在此元素</p><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-xjkiz3m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-xjkiz3m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> n, m, k;<br>vector&lt;<span class="hljs-type">int</span>&gt; a, d, f;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>   vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; v;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>   &#123;<br>      <span class="hljs-keyword">if</span> (a[i] - a[i - <span class="hljs-number">1</span>] &gt; x)<br>      &#123;<br>         v.<span class="hljs-built_in">push_back</span>(&#123;a[i - <span class="hljs-number">1</span>], a[i]&#125;);<br>         <span class="hljs-keyword">if</span> (v.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (v.<span class="hljs-built_in">empty</span>())<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>   <span class="hljs-type">int</span> l = v[<span class="hljs-number">0</span>].second - x, r = v[<span class="hljs-number">0</span>].first + x;<br>   <span class="hljs-keyword">if</span> (r &lt; l)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : d)<br>   &#123;<br>      <span class="hljs-keyword">if</span> (i &gt;= r)<br>         <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">lower_bound</span>(f.<span class="hljs-built_in">begin</span>(), f.<span class="hljs-built_in">end</span>(), l - i);<br>      <span class="hljs-keyword">if</span> (p != f.<span class="hljs-built_in">end</span>() &amp;&amp; *p + i &lt;= r)<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>   a.<span class="hljs-built_in">resize</span>(n);<br>   d.<span class="hljs-built_in">resize</span>(m);<br>   f.<span class="hljs-built_in">resize</span>(k);<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;it : a)<br>      cin &gt;&gt; it;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;it : d)<br>      cin &gt;&gt; it;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;it : f)<br>      cin &gt;&gt; it;<br><br>   <span class="hljs-built_in">sort</span>(d.<span class="hljs-built_in">begin</span>(), d.<span class="hljs-built_in">end</span>());<br>   <span class="hljs-built_in">sort</span>(f.<span class="hljs-built_in">begin</span>(), f.<span class="hljs-built_in">end</span>());<br><br>   <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0x7fffffff</span>, ans = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (l &lt;= r)<br>   &#123;<br>      <span class="hljs-type">int</span> mid = r - (r - l) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>         ans = mid, r = mid - <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span><br>         l = mid + <span class="hljs-number">1</span>;<br>   &#125;<br>   cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>   <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>   cin &gt;&gt; t;<br>   <span class="hljs-keyword">while</span> (t--)<br>      <span class="hljs-built_in">solve</span>();<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="g">G</h2><h3 id="思路-6">思路</h3><p>双端队列 <span class="math inline">\(dq\)</span> 中的 <spanclass="math inline">\(d,u,a\)</span> 分别表示到 <spanclass="math inline">\(u\)</span> 上一个颜色是 <spanclass="math inline">\(a\)</span> 的距离是 <spanclass="math inline">\(d\)</span> ，当 <spanclass="math inline">\(a=0\)</span> 时 <spanclass="math inline">\(d\)</span> 表示从起点到 <spanclass="math inline">\(u\)</span> 的距离</p><p>如果 <span class="math inline">\(a\)</span>有值说明有颜色，则到达同色的节点花费为 <spanclass="math inline">\(0\)</span></p><p>如果 <spanclass="math inline">\(a=0\)</span>，就通往别的颜色的节点，花费为 <spanclass="math inline">\(1\)</span>​</p><p>为了让花费低的优先搜索，将花费为 <spanclass="math inline">\(0\)</span> 的情况放在队首，将花费为 <spanclass="math inline">\(1\)</span> 的情况放在队尾</p><h3 id="code-6">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-bf2zyxm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-bf2zyxm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    vector&lt;map&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">g</span>(n + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u, v, c;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; c;<br>        g[u][c].<span class="hljs-built_in">push_back</span>(v);<br>        g[v][c].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br><br>    map&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, <span class="hljs-type">int</span>&gt; dis;<br>    deque&lt;tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; dq;<br>    <span class="hljs-type">int</span> b, e;<br>    cin &gt;&gt; b &gt;&gt; e;<br>    dq.<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-number">0</span>, b, <span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span> (!dq.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> [d, u, a] = dq.<span class="hljs-built_in">front</span>();<br>        dq.<span class="hljs-built_in">pop_front</span>();<br><br>        <span class="hljs-keyword">if</span> (dis.<span class="hljs-built_in">count</span>(&#123;u, a&#125;))<br>            <span class="hljs-keyword">continue</span>;<br>        dis[&#123;u, a&#125;] = d;<br><br>        <span class="hljs-keyword">if</span> (a)<br>        &#123;<br>            dq.<span class="hljs-built_in">push_front</span>(&#123;d, u, <span class="hljs-number">0</span>&#125;);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : g[u][a])<br>                dq.<span class="hljs-built_in">push_front</span>(&#123;d, v, a&#125;);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [a, _] : g[u])<br>                dq.<span class="hljs-built_in">push_back</span>(&#123;d + <span class="hljs-number">1</span>, u, a&#125;);<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; dis[&#123;e, <span class="hljs-number">0</span>&#125;] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字典树</title>
    <link href="/archives/4003859050/"/>
    <url>/archives/4003859050/</url>
    
    <content type="html"><![CDATA[<h2 id="字典树">字典树</h2><p>查找一个字符串是否在「字典」中出现过</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-tm6600m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-tm6600m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">trie</span><br>&#123;<br>    <span class="hljs-type">int</span> nex[<span class="hljs-number">100000</span>][<span class="hljs-number">26</span>], tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> exist[<span class="hljs-number">100000</span>]; <span class="hljs-comment">// 该结点结尾的字符串是否存在</span><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-type">int</span> c = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (!nex[p][c])<br>                nex[p][c] = ++tot; <span class="hljs-comment">// 如果没有，就添加结点</span><br>            p = nex[p][c];<br>        &#125;<br>        exist[p] = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-comment">// 查找字符串</span><br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-type">int</span> c = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (!nex[p][c])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            p = nex[p][c];<br>        &#125;<br>        <span class="hljs-keyword">return</span> exist[p];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></div></figure><h2 id="字典树异或">01字典树（异或）</h2><p>最大异或和</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-93i6som2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-93i6som2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">trie</span><br>&#123;<br>    <span class="hljs-type">int</span> nex[<span class="hljs-number">31</span> * <span class="hljs-number">100000</span>][<span class="hljs-number">2</span>], tot = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-type">int</span> ch = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!nex[p][ch])<br>                nex[p][ch] = ++tot; <span class="hljs-comment">// 如果没有，就添加结点</span><br>            p = nex[p][ch];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-comment">// 查找字符串</span><br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-type">int</span> ch = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (nex[p][ch ^ <span class="hljs-number">1</span>])<br>            &#123;<br>                res += <span class="hljs-number">1</span> &lt;&lt; i;<br>                p = nex[p][ch ^ <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                p = nex[p][ch];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>模板</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“达梦杯”武汉理工大学第五届新生程序设计大赛</title>
    <link href="/archives/4174912869/"/>
    <url>/archives/4174912869/</url>
    
    <content type="html"><![CDATA[<h2 id="a.-awa开小车">A. Awa开小车</h2><h3 id="思路">思路</h3><p>根据题意模拟。</p><p>遇到没触发过的导向板就进行转向，计数，并标记为来过，直到小车爆炸。</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-9mlywam2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-9mlywam2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">111</span>;<br><br><span class="hljs-type">char</span> mp[N][N];<br><span class="hljs-type">bool</span> vis[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, x, y;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            cin &gt;&gt; mp[i][j];<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> now = mp[x][y];<br>    vis[x][y] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (now == <span class="hljs-string">&#x27;D&#x27;</span>)<br>            x++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (now == <span class="hljs-string">&#x27;U&#x27;</span>)<br>            x--;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (now == <span class="hljs-string">&#x27;L&#x27;</span>)<br>            y--;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (now == <span class="hljs-string">&#x27;R&#x27;</span>)<br>            y++;<br><br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">1</span> || x &gt; n || y &lt; <span class="hljs-number">1</span> || y &gt; m)<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">if</span> (vis[x][y])<br>            <span class="hljs-keyword">continue</span>;<br>        vis[x][y] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> (mp[x][y] != now)<br>        &#123;<br>            ans++;<br>            now = mp[x][y];<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b.-jokerxuan的明星梦">B. JokerXuan的明星梦</h2><h3 id="思路-1">思路</h3><p><span class="math inline">\(now\)</span> 表示当前的幸运数字，<spanclass="math inline">\(num0\)</span> 和 <spanclass="math inline">\(num1\)</span> 分别表示每个位全为 <spanclass="math inline">\(0\)</span> 的数和全为 <spanclass="math inline">\(1\)</span> 的数经过几天的操作后的结果</p><p>如果出现 <span class="math inline">\(null\)</span>，我们查看 <spanclass="math inline">\(num0\)</span> 和 <spanclass="math inline">\(num1\)</span> 的每一位：</p><ul><li>都为 <span class="math inline">\(1\)</span> 则 <spanclass="math inline">\(now\)</span> 的这一位一定是 <spanclass="math inline">\(1\)</span></li><li>都为 <span class="math inline">\(0\)</span> 则 <spanclass="math inline">\(now\)</span> 的这一位一定是 <spanclass="math inline">\(0\)</span></li><li>如果 <span class="math inline">\(num0\)</span> 为 <spanclass="math inline">\(1\)</span> 且 <spanclass="math inline">\(num1\)</span> 为 <spanclass="math inline">\(0\)</span> 则这一位要改变</li><li>否则这一位没有改变</li></ul><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-nlwcnym2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-nlwcnym2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> now, num0 = <span class="hljs-number">0</span>, num1 = <span class="hljs-number">-1</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">30</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((num0 &amp; <span class="hljs-number">1</span> &lt;&lt; i) &amp;&amp; (num1 &amp; <span class="hljs-number">1</span> &lt;&lt; i))<br>            now |= <span class="hljs-number">1</span> &lt;&lt; i;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((!num0 &amp; <span class="hljs-number">1</span> &lt;&lt; i) &amp;&amp; !(num1 &amp; <span class="hljs-number">1</span> &lt;&lt; i))<br>            now &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; i);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((num0 &amp; <span class="hljs-number">1</span> &lt;&lt; i) &amp;&amp; !(num1 &amp; <span class="hljs-number">1</span> &lt;&lt; i))<br>            now ^= <span class="hljs-number">1</span> &lt;&lt; i;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    string t;<br>    cin &gt;&gt; t &gt;&gt; now;<br>    cout &lt;&lt; now &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; t;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-string">&quot;null&quot;</span>)<br>            <span class="hljs-built_in">func</span>();<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            cin &gt;&gt; x;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)<br>                now = x;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> time = <span class="hljs-built_in">atoi</span>(t.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, t.<span class="hljs-built_in">size</span>() - <span class="hljs-number">3</span>).<span class="hljs-built_in">c_str</span>());<br>                <span class="hljs-keyword">if</span> (time &lt; <span class="hljs-number">12</span>)<br>                    now &amp;= x, num0 &amp;= x, num1 &amp;= x;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (time &lt; <span class="hljs-number">18</span>)<br>                    now |= x, num0 |= x, num1 |= x;<br>                <span class="hljs-keyword">else</span><br>                    now ^= x, num0 ^= x, num1 ^= x;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; now &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c.-what-is-acm">C. What is ACM?</h2><h3 id="思路-2">思路</h3><p>遇到关键字符 <span class="math inline">\(ACM\)</span> 就加入字符串<span class="math inline">\(tmp\)</span>，如果当前不是关键字符就输出<span class="math inline">\(tmp\)</span></p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-960pwmm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-960pwmm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    string s, t;<br>    cin &gt;&gt; n &gt;&gt; s &gt;&gt; t;<br><br>    string tmp, acm = <span class="hljs-string">&quot;ACM&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (acm.<span class="hljs-built_in">find</span>(t[i]) != string::npos)<br>            tmp += s[i];<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (tmp != <span class="hljs-string">&quot;&quot;</span>)<br>                cout &lt;&lt; tmp &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            tmp = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; tmp &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d.-呼风唤雨">D. 呼风唤雨</h2><h3 id="思路-3">思路</h3><p>将每个位置都作为分界点，记录最大值即可</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-f73th2m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-f73th2m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">v</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; v[i];<br>        v[i] *= <span class="hljs-number">514</span>;<br>        sum += v[i];<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt; n; k++)<br>    &#123;<br>        sum -= v[k];<br>        sum += v[k] / <span class="hljs-number">514</span> * <span class="hljs-number">114</span>;<br>        ans = <span class="hljs-built_in">max</span>(ans, sum);<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e.-急急国王修公路">E. 急急国王修公路</h2><h3 id="思路-4">思路</h3><p>通过并查集记录每个州（联通块）有多少城池（度数）。</p><p>生成一颗树需要 <span class="math inline">\(n-1\)</span> 条无向边，即<span class="math inline">\(2*(n-1)\)</span> 度数</p><p>二分答案 <span class="math inline">\(x\)</span> ，每个联通块能提供<span class="math inline">\(\min (size[i], x)\)</span> 度数，其中 <spanclass="math inline">\(size[i]\)</span> 为第 <spanclass="math inline">\(i\)</span>个联通块的度数，判断度数是否满足即可。</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-kfg6rwm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-kfg6rwm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; fa;<br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]); &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; fa[<span class="hljs-built_in">find</span>(x)] = <span class="hljs-built_in">find</span>(y); &#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [a, b] : mp)<br>        sum += <span class="hljs-built_in">min</span>(x, b);<br>    <span class="hljs-keyword">return</span> sum &gt;= <span class="hljs-number">2</span> * (mp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    fa.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        fa[i] = i;<br><br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-built_in">merge</span>(a, b);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        mp[<span class="hljs-built_in">find</span>(i)]++;<br><br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n, ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge</span>(mid))<br>            ans = mid, r = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f.-绒绒的括号序列">F. 绒绒的括号序列</h2><h3 id="思路-5">思路</h3><p>待补</p><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-j4ls8tm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-j4ls8tm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">待补<br></code></pre></td></tr></table></div></figure><h2 id="g.-神奇的礼物">G. 神奇的礼物</h2><h3 id="思路-6">思路</h3><p>易知，如果两数之差的绝对值模 <span class="math inline">\(3\)</span>余 <span class="math inline">\(0\)</span>，则可以通过数次操作使这两数相等</p><h3 id="code-6">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-cqwc1cm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-cqwc1cm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> g[<span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++)<br>        cin &gt;&gt; g[i];<br><br>    <span class="hljs-type">int</span> i;<br>    cin &gt;&gt; i;<br>    <span class="hljs-built_in">swap</span>(g[i], g[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">if</span> ((g[<span class="hljs-number">2</span>] - g[<span class="hljs-number">3</span>]) % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Yes\n&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="h.-小f的圣诞树">H. 小F的圣诞树</h2><h3 id="思路-7">思路</h3><p>对于重量较大的礼物，相互作用为它的重量乘以它们的深度之和。</p><p>从 <span class="math inline">\(1\)</span>号节点进行搜索，记录每个节点的深度，再按重量对节点降序排序。</p><p>对于节点 <span class="math inline">\(i\)</span> 它和它后面 <spanclass="math inline">\(n\)</span> 个节点的相互作用之和为节点 <spanclass="math inline">\(i\)</span> 的重量乘以后面节点的深度加上 <spanclass="math inline">\(n\)</span> 个节点 <spanclass="math inline">\(i\)</span> 的深度之和。</p><p>通过前缀和优化求深度和的时间复杂度</p><h3 id="code-7">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-zgvw3hm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-zgvw3hm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> val, dep;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;node&gt; <span class="hljs-title">v</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; v[i].val;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">g</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        g[x].<span class="hljs-built_in">push_back</span>(y);<br>        g[y].<span class="hljs-built_in">push_back</span>(x);<br>    &#125;<br><br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> [now, dep] = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        v[now].dep = dep;<br>        vis[now] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : g[now])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!vis[it])<br>                q.<span class="hljs-built_in">push</span>(&#123;it, dep + <span class="hljs-number">1</span>&#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, v.<span class="hljs-built_in">end</span>(), [](node a, node b)<br>         &#123; <span class="hljs-keyword">return</span> a.val &gt; b.val; &#125;);<br><br>    ll ans = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">sum</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        sum[i] = sum[i - <span class="hljs-number">1</span>] + v[i].dep;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        ans = (ans + (v[i].val * (sum[n] - sum[i] + <span class="hljs-number">1LL</span> * (n - i) * v[i].dep) % mod)) % mod;<br><br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="i.-优雅太优雅了">I. 优雅太优雅了</h2><h3 id="思路-8">思路</h3><p>已知 <span class="math inline">\(\forall[l, r], \min (a[l], a[l+1],\cdots, a[r]) \geqslant \operatorname{gcd}(a[l], a[l+1], \cdots,a[r])\)</span> 成立</p><p>那么 <span class="math inline">\(\forall[l, r], \min (a[l], a[l+1],\cdots, a[r-1]) \geqslant \operatorname{gcd}(a[l], a[l+1], \cdots,a[r-1])\)</span> 成立</p><p>当 <span class="math inline">\(a_i\)</span>不能改变区间最小值的时候，不管 <spanclass="math inline">\(a_{i+1}\)</span> 是什么数，区间 <spanclass="math inline">\(gcd\)</span> 都不会增加，都有 <spanclass="math inline">\(\forall[l, r], \min (a[l], a[l+1], \cdots, a[r])\geqslant \operatorname{gcd}(a[l], a[l+1], \cdots, a[r+1])\)</span></p><p>反之当 <span class="math inline">\(a_i\)</span> 为区间最小值时考虑<span class="math inline">\(\forall[l, r],a_r \geqslant\operatorname{gcd}(a[l], a[l+1], \cdots, a[r+1])\)</span>，区间 <spanclass="math inline">\(gcd\)</span> 会随着 <spanclass="math inline">\(l\)</span> 减小而减小</p><p>当 <span class="math inline">\(l\)</span> 最靠近 <spanclass="math inline">\(r\)</span> 时，右侧取最大值 <spanclass="math inline">\(\operatorname{gcd}(a[r-1], a[r+1])\)</span></p><p>故只需证明 <span class="math inline">\(\forall[l, r],a_r \geqslant\operatorname{gcd}(a[r-1], a[r+1])\)</span></p><h3 id="code-8">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-g4u7smm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-g4u7smm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a; &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; v[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v[i] &lt; <span class="hljs-built_in">gcd</span>(v[i - <span class="hljs-number">1</span>], v[i + <span class="hljs-number">1</span>]))<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Rude&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Elegant&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="j.-逆序对">J. 逆序对</h2><h3 id="思路-9">思路</h3><p><ahref="https://www.nowcoder.com/discuss/425353706683555840">见题解</a></p><h3 id="code-9">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-b2zfr9m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-b2zfr9m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> nex[<span class="hljs-number">31</span> * N][<span class="hljs-number">2</span>], tot = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">31</span> * N][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp1 = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> tmp2 = (y &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> tmp = tmp1 ^ tmp2;<br><br>        <span class="hljs-keyword">if</span> (!nex[p][tmp])<br>            nex[p][tmp] = ++tot;<br>        cnt[p][tmp1][tmp2]++;<br>        p = nex[p][tmp];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp1 = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> tmp2 = (y &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> tmp = tmp1 ^ tmp2;<br><br>        res += cnt[p][tmp2 ^ <span class="hljs-number">1</span>][tmp1];<br>        <span class="hljs-keyword">if</span> (!nex[p][tmp])<br>            <span class="hljs-keyword">return</span> res;<br>        p = nex[p][tmp];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; tot; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            nex[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">2</span>; k++)<br>                cnt[i][j][k] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    tot = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; b[i];<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        ans += <span class="hljs-built_in">query</span>(a[i], b[i]);<br>        <span class="hljs-built_in">insert</span>(a[i], b[i]);<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 929 (Div. 3)</title>
    <link href="/archives/4210095459/"/>
    <url>/archives/4210095459/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://codeforces.com/contest/1933">Codeforces Round 929(Div. 3)</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>将所有的负数放到一起，再一起变成相反数。即将所有数的绝对值加在一起即可。</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-qphj1xm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-qphj1xm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        ans += <span class="hljs-built_in">abs</span>(x);<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>判断所有数的和对 <span class="math inline">\(3\)</span> 取余的结果：- 余 <span class="math inline">\(0\)</span>：说明已经是三的倍数，直接输出 <span class="math inline">\(0\)</span> -余 <span class="math inline">\(1\)</span> ：如果存在一个数对 <spanclass="math inline">\(3\)</span> 取余为 <spanclass="math inline">\(1\)</span> ，则删除这个数即可，需要 <spanclass="math inline">\(1\)</span> 步。若不存在，则可以让一个数 <spanclass="math inline">\(+2\)</span> ，需要 <spanclass="math inline">\(2\)</span> 步。 - 余 <spanclass="math inline">\(2\)</span> ：直接让一个数 <spanclass="math inline">\(+1\)</span> 即可，需要 <spanclass="math inline">\(1\)</span> 步</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-8oc06bm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-8oc06bm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> &amp;x : a)<br>        cin &gt;&gt; x;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : a)<br>        sum += x;<br><br>    <span class="hljs-type">int</span> t = sum % <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-number">0</span>)<br>    &#123;<br>        cout &lt;&lt; t &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : a)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (x % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>)<br>            &#123;<br>                cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>因为 <span class="math inline">\(l\)</span> 的大小不超过 <spanclass="math inline">\(1e6\)</span> ，所以 <spanclass="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span> 的大小不超过 <spanclass="math inline">\(20\ (2^{20} = 1048576 \gt 1e6)\)</span></p><p>所以我们遍历所有可能用 <span class="math inline">\(set\)</span>对答案去重即可。（用 <span class="math inline">\(pow\)</span>不会超时但是不建议）</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-dd5vi5m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-dd5vi5m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll b, ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            res = <span class="hljs-number">1LL</span> * res * a % mod;<br>        a = <span class="hljs-number">1LL</span> * a * a % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll a, b, l;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; l;<br><br>    set&lt;ll&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt;= <span class="hljs-number">20</span>; x++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">qpow</span>(a, x) &gt; l)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt;= <span class="hljs-number">20</span>; y++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">qpow</span>(b, y) &gt; l)<br>                <span class="hljs-keyword">break</span>;<br><br>            ll z = <span class="hljs-built_in">qpow</span>(a, x) * <span class="hljs-built_in">qpow</span>(b, y);<br>            <span class="hljs-keyword">if</span> (l % z == <span class="hljs-number">0</span>)<br>                ans.<span class="hljs-built_in">insert</span>(l / z);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>已知，如果 <span class="math inline">\(a \lt b\)</span>，则 <spanclass="math inline">\(a\%b =a\)</span>。故我们可以将数组按升序排序。</p><p>如果最小值只有一个数，则从它开始往后取余最后的结果一定是他本身。</p><p>如果最小值不止一个，则遍历所有的数，对最小值取余。取余后的结果一定小于最小值。如果存在不为<span class="math inline">\(0\)</span> 的余数，则输出 <spanclass="math inline">\(YES\)</span>。</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-fancb5m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-fancb5m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; v[i];<br><br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">if</span> (v[<span class="hljs-number">0</span>] != v[<span class="hljs-number">1</span>])<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;YES\n&quot;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : v)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (x % v[<span class="hljs-number">0</span>] != <span class="hljs-number">0</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;YES\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;NO\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>能力提高的值是一个首项为 <spanclass="math inline">\(u\)</span>，公差为 <spanclass="math inline">\(-1\)</span>，的等差数列的前 <spanclass="math inline">\(n\)</span> 项和，可知当 <spanclass="math inline">\(n = u\)</span> 或者 <span class="math inline">\(n= u + 1\)</span> 时取最大值。</p><p>通过前缀和的预处理加上二分搜索，我们可以快速找到最大值是在哪个赛道。由于懒得证明，采用遍历周围几个判断是否有别的情况。</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-byfxgxm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-byfxgxm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function">ll <span class="hljs-title">get</span><span class="hljs-params">(ll a1, ll d, ll n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> n * a1 + n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> * d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-built_in">partial_sum</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), a.<span class="hljs-built_in">begin</span>());<br><br>    <span class="hljs-type">int</span> q;<br>    cin &gt;&gt; q;<br><br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> l, u;<br>        cin &gt;&gt; l &gt;&gt; u;<br>        <span class="hljs-keyword">if</span> (a[l - <span class="hljs-number">1</span>] + u &gt;= a[n])<br>        &#123;<br>            cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> r = <span class="hljs-built_in">lower_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), a[l - <span class="hljs-number">1</span>] + u) - a.<span class="hljs-built_in">begin</span>();<br><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        ll ma = <span class="hljs-number">-0x3f3f3f3f3f3f3f3f</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = <span class="hljs-built_in">max</span>(l, r - <span class="hljs-number">2</span>); p &lt;= <span class="hljs-built_in">min</span>(r + <span class="hljs-number">2</span>, n); p++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!ans || <span class="hljs-built_in">get</span>(u, <span class="hljs-number">-1</span>, a[p] - a[l - <span class="hljs-number">1</span>]) &gt; ma)<br>            &#123;<br>                ans = p;<br>                ma = <span class="hljs-built_in">get</span>(u, <span class="hljs-number">-1</span>, a[p] - a[l - <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f">F</h2><h3 id="思路-5">思路</h3><p>我们可以将石头看作是不动的，那么对于机器人每次有两种行动，向下走两步和向右下角走一步（还有原地不动，对移动没有贡献故不计）。终点每次会向下移动走一步。</p><p>通过 <span class="math inline">\(BFS\)</span>可以求出机器人到达最后一列的步数，此时答案即为步数加上机器人和终点<strong>当前位置</strong>的距离。</p><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-mqs9rem2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-mqs9rem2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, cnt;<br>&#125;;<br><br><span class="hljs-type">char</span> mp[<span class="hljs-number">2010</span>][<span class="hljs-number">2010</span>];<br><span class="hljs-type">int</span> px, py;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>            cin &gt;&gt; mp[i][j];<br><br>    px = n - <span class="hljs-number">1</span>, py = m - <span class="hljs-number">1</span>;<br><br>    queue&lt;node&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>    vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">vis</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(m, <span class="hljs-literal">false</span>));<br>    vis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> [x, y, cnt] = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (y == py)<br>        &#123;<br>            px = (px + cnt) % n;<br>            cout &lt;&lt; <span class="hljs-built_in">min</span>(n - <span class="hljs-built_in">abs</span>(px - x), <span class="hljs-built_in">abs</span>(px - x)) + cnt &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (mp[(x + <span class="hljs-number">1</span>) % n][y] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; mp[(x + <span class="hljs-number">2</span>) % n][y] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; !vis[(x + <span class="hljs-number">2</span>) % n][y])<br>        &#123;<br>            vis[(x + <span class="hljs-number">2</span>) % n][y] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(&#123;(x + <span class="hljs-number">2</span>) % n, y, cnt + <span class="hljs-number">1</span>&#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (mp[(x + <span class="hljs-number">1</span>) % n][y + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; !vis[(x + <span class="hljs-number">1</span>) % n][y + <span class="hljs-number">1</span>])<br>        &#123;<br>            vis[(x + <span class="hljs-number">1</span>) % n][y + <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(&#123;(x + <span class="hljs-number">1</span>) % n, y + <span class="hljs-number">1</span>, cnt + <span class="hljs-number">1</span>&#125;);<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 SZTU-ACM寒期集训阶段赛</title>
    <link href="/archives/3504666746/"/>
    <url>/archives/3504666746/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><table><thead><tr><th style="text-align: center;">难度</th><th style="text-align: center;">题号</th></tr></thead><tbody><tr><td style="text-align: center;">签到</td><td style="text-align: center;"><span class="math inline">\(G\H\)</span></td></tr><tr><td style="text-align: center;">简单</td><td style="text-align: center;"><span class="math inline">\(F\J\)</span></td></tr><tr><td style="text-align: center;">中等</td><td style="text-align: center;"><span class="math inline">\(B\ C\ E\I\)</span></td></tr><tr><td style="text-align: center;">困难</td><td style="text-align: center;"><span class="math inline">\(A\D\)</span></td></tr></tbody></table><h2 id="a-又要迟到了">A 又要迟到了</h2><h3 id="考点">考点：</h3><ul><li>搜索</li><li>图论</li></ul><h3 id="题解">题解：</h3><blockquote><p>困难题</p></blockquote><h4 id="解法一两遍-bfs-onm-k">解法一：两遍 <spanclass="math inline">\(BFS\)</span> <span class="math inline">\(O(n*m +k)\)</span></h4><p>从起点开始做 <span class="math inline">\(BFS\)</span>记录从起点到每个位置只走路（每步时间为 <spanclass="math inline">\(t_1\)</span> ）的时间 <spanclass="math inline">\(t_{w}\)</span></p><p>从终点开始做 <span class="math inline">\(BFS\)</span>记录从终点到每个位置用单车（每步时间为 <spanclass="math inline">\(t_2\)</span> ）的时间 <spanclass="math inline">\(t_c\)</span></p><p>维护一个最小值 <span class="math inline">\(ans\)</span></p><p>遍历所有的单车的位置 <span class="math inline">\((i,j)\)</span>，此时 <span class="math inline">\(ans = min(ans,\ t_w[i][j] +t_c[i][j])\)</span></p><p>再额外判断一次如果不找单车，直接用走路的方式从起点到终点 <spanclass="math inline">\((i,j)\)</span> ，即 <spanclass="math inline">\(ans = min(ans,\ t_w[i][j])\)</span>​</p><p>如果 <span class="math inline">\(ans \le t\)</span>则输出结果，反之则不能按时到达</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-lrfa8zm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-lrfa8zm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m, t, t1, t2;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; S, T;<br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; C;<br><span class="hljs-type">char</span> mp[N][N];<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">t_w</span>(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(N, <span class="hljs-number">0x3f3f3f3f</span>));<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">t_c</span>(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(N, <span class="hljs-number">0x3f3f3f3f</span>));<br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">bool</span> vis[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; &amp;t, <span class="hljs-type">int</span> dt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br><br>    vis[PII.first][PII.second] = <span class="hljs-literal">true</span>;<br>    t[PII.first][PII.second] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(PII.first, PII.second));<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>().first;<br>        <span class="hljs-type">int</span> y = q.<span class="hljs-built_in">front</span>().second;<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> tx = x + dx[i];<br>            <span class="hljs-type">int</span> ty = y + dy[i];<br><br>            <span class="hljs-keyword">if</span> (tx &lt; <span class="hljs-number">1</span> || ty &lt; <span class="hljs-number">1</span> || tx &gt; n || ty &gt; m || vis[tx][ty] || mp[tx][ty] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br><br>            vis[tx][ty] = <span class="hljs-literal">true</span>;<br>            t[tx][ty] = t[x][y] + dt;<br>            q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(tx, ty));<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t &gt;&gt; t1 &gt;&gt; t2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            cin &gt;&gt; mp[i][j];<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>                S = <span class="hljs-built_in">make_pair</span>(i, j);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;T&#x27;</span>)<br>                T = <span class="hljs-built_in">make_pair</span>(i, j);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;C&#x27;</span>)<br>                C.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(i, j));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">bfs</span>(S, t_w, t1);<br>    <span class="hljs-built_in">bfs</span>(T, t_c, t2);<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : C)<br>    &#123;<br>        <span class="hljs-type">int</span> cx = it.first;<br>        <span class="hljs-type">int</span> cy = it.second;<br>        ans = <span class="hljs-built_in">min</span>(ans, t_w[cx][cy] + t_c[cx][cy]);<br>    &#125;<br>    ans = <span class="hljs-built_in">min</span>(ans, t_w[T.first][T.second]);<br><br>    <span class="hljs-keyword">if</span> (ans &lt;= t)<br>        cout &lt;&lt; ans;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Oh no!&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h4 id="解法二bfs优先队列-o2nm-log-nm">解法二：BFS+优先队列 <spanclass="math inline">\(O(2nm \log (nm))\)</span></h4><p>使用优先队列让最短时间在队首，时间相同的时候优先有车的。</p><p><span class="math inline">\(BFS\)</span>直到到达终点，此时的时间即为答案。若队列结束也没有到达终点则返回 <spanclass="math inline">\(-1\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-vc10nwm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-vc10nwm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m, t, t1, t2;<br><span class="hljs-type">int</span> sx, sy;<br><span class="hljs-type">char</span> mp[N][N];<br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">bool</span> vis[N][N][<span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, t;<br>    <span class="hljs-type">bool</span> flag;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node a, <span class="hljs-type">const</span> node b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a.t != b.t)<br>            <span class="hljs-keyword">return</span> a.t &gt; b.t;<br>        <span class="hljs-keyword">return</span> a.flag &lt; b.flag;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;node&gt; q;<br><br>    q.<span class="hljs-built_in">push</span>(&#123;sx, sy, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>    vis[sx][sy][<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node now = q.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-type">int</span> x = now.x;<br>        <span class="hljs-type">int</span> y = now.y;<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (mp[x][y] == <span class="hljs-string">&#x27;T&#x27;</span>)<br>            <span class="hljs-keyword">return</span> now.t;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> tx = x + dx[i];<br>            <span class="hljs-type">int</span> ty = y + dy[i];<br>            <span class="hljs-type">int</span> tt = now.t + (now.flag ? t2 : t1);<br>            <span class="hljs-type">bool</span> flag = now.flag || mp[tx][ty] == <span class="hljs-string">&#x27;C&#x27;</span>;<br><br>            <span class="hljs-keyword">if</span> (tx &lt; <span class="hljs-number">1</span> || ty &lt; <span class="hljs-number">1</span> || tx &gt; n || ty &gt; m || vis[tx][ty][flag] || mp[tx][ty] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br><br>            vis[tx][ty][flag] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(&#123;tx, ty, tt, flag&#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t &gt;&gt; t1 &gt;&gt; t2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            cin &gt;&gt; mp[i][j];<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>                sx = i, sy = j;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">bfs</span>();<br>    <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">-1</span>)<br>        cout &lt;&lt; ans;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Oh no!&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b-最大生成树">B 最大生成树</h2><h3 id="考点-1">考点：</h3><ul><li>图论</li></ul><h3 id="题解-1">题解：</h3><blockquote><p>中等题</p></blockquote><p>最小生成树板子题，将比较时小的优先改为大的优先即可</p><p>复杂度： <span class="math inline">\(O(m \log m)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-e1trt9m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-e1trt9m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span><br>&#123;<br>    <span class="hljs-type">int</span> u, v, w;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(Edge <span class="hljs-type">const</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> w &lt; a.w; &#125;<br>&#125;;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; fa;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]); &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    fa.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        fa[i] = i;<br><br>    priority_queue&lt;Edge&gt; e;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        e.<span class="hljs-built_in">push</span>(&#123;u, v, w&#125;);<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!e.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> [u, v, w] = e.<span class="hljs-built_in">top</span>();<br>        e.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-type">int</span> fu = <span class="hljs-built_in">find</span>(u), fv = <span class="hljs-built_in">find</span>(v);<br>        <span class="hljs-keyword">if</span> (fu != fv)<br>        &#123;<br>            fa[fu] = fv;<br>            ans += w;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c-最短路">C 最短路</h2><h3 id="考点-2">考点：</h3><ul><li>图论</li></ul><h3 id="题解-2">题解：</h3><blockquote><p>中等题</p></blockquote><p>通过 <span class="math inline">\(floyd\)</span>​将全源最短路都找出来，最后判断这条边是否可以被另一条最短路替代，计数即可。</p><p>复杂度： <span class="math inline">\(O(n^3)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ak6niom2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-ak6niom2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span><br>&#123;<br>    <span class="hljs-type">int</span> u, v, w;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dis</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-number">0x3f3f3f3f</span>));<br>    <span class="hljs-function">vector&lt;Edge&gt; <span class="hljs-title">e</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;<br>        dis[e[i].u][e[i].v] = dis[e[i].v][e[i].u] = e[i].w;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; u++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">1</span>; v &lt;= n; v++)<br>                dis[u][v] = <span class="hljs-built_in">min</span>(dis[u][v], dis[u][k] + dis[k][v]);<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [u, v, w] : e)<br>    &#123;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (dis[u][k] + dis[k][v] &lt;= w)<br>                flag = <span class="hljs-literal">true</span>;<br>        &#125;<br>        ans += flag;<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d-相撞的房子">D 相撞的房子</h2><h3 id="考点-3">考点：</h3><ul><li>树状数组</li></ul><h3 id="题解-3">题解：</h3><blockquote><p>困难题</p></blockquote><p>本题可以理解为两个一维数组（行和列）进行单点修改和区间求和，很明显是树状数组的板子题，不过还需要进行一些分析。</p><p>以题目的样例为例，先以 <span class="math inline">\((2,2)\)</span>​为中心向东南西北建房子</p><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-c90ec6m2bpjx5j"></i><span>test</span><div class="collapse show" id="collapse-c90ec6m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs test">o x o o<br>x o x x<br>o x o o<br>o x o o<br></code></pre></td></tr></table></div></figure><p>再以 <span class="math inline">\((4,4)\)</span>​为中心向东南西北建房子</p><figure class="highlight plaintext"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-wgzxcqm2bpjx5j"></i><span>test</span><div class="collapse show" id="collapse-wgzxcqm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs test">o x o x<br>x o x o<br>o x o x<br>x o x o<br></code></pre></td></tr></table></div></figure><p>我们可以得到房子的数量应该是：</p><p><strong>放过的行数×m + 放过的列数×n − 抵消块数</strong></p><p>放过的行数和列数用树状数组来维护即可</p><p>而抵消的块数该怎么讨论呢？</p><p>在算行列的时候，每一个交叉点是记了两次的。图中有多少交叉点呢？记放过的行数为<span class="math inline">\(x\)</span>，放过的列数为 <spanclass="math inline">\(y\)</span>，每行每列交叉一个，抵消的块数就是 <spanclass="math inline">\(2xy\)</span>​。</p><p>所以现在只需要求出 <span class="math inline">\(x,y\)</span>​就可以了</p><p>如果放在的行和列是已经放过的那就会变为没房子状态，如果要放的行和列没房子，那就会变成有房子状态，相当于异或操作。</p><p>复杂度： <span class="math inline">\(O(q\log n)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-uagf8bm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-uagf8bm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> ax[maxn], ay[maxn];<br><span class="hljs-type">int</span> dx[maxn], dy[maxn];<br><span class="hljs-type">int</span> n, m, q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> i &amp; (-i);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> c[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> add)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= len; i += <span class="hljs-built_in">lowbit</span>(i))<br>    &#123;<br>        c[i] += add;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> c[], <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))<br>    &#123;<br>        sum += c[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (ax[x] == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(dx, n, x, <span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">update</span>(dx, n, x, <span class="hljs-number">1</span>);<br>    &#125;<br>    ax[x] ^= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (ay[y] == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(dy, m, y, <span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">update</span>(dy, m, y, <span class="hljs-number">1</span>);<br>    &#125;<br>    ay[y] ^= <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll s1 = <span class="hljs-built_in">query</span>(dx, x2) - <span class="hljs-built_in">query</span>(dx, x1 - <span class="hljs-number">1</span>);<br>    ll s2 = <span class="hljs-built_in">query</span>(dy, y2) - <span class="hljs-built_in">query</span>(dy, y1 - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span> * s1 * (y2 - y1 + <span class="hljs-number">1</span>) + <span class="hljs-number">1LL</span> * s2 * (x2 - x1 + <span class="hljs-number">1</span>) - <span class="hljs-number">1LL</span> * <span class="hljs-number">2</span> * s1 * s2;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> op;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x, y;<br>            cin &gt;&gt; x &gt;&gt; y;<br>            <span class="hljs-built_in">solve</span>(x, y);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> x1, y1, x2, y2;<br>            cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>            cout &lt;&lt; <span class="hljs-built_in">work</span>(x1, y1, x2, y2) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e-动感超人">E 动感超人</h2><h3 id="考点-4">考点：</h3><ul><li>背包问题</li></ul><h3 id="题解-4">题解：</h3><blockquote><p>中等题</p></blockquote><p>这题可以用背包的思路来做；首先，设<spanclass="math inline">\(dp[j]\)</span>表示运 <spanclass="math inline">\(j\)</span> 只玩具回家的最小时间，<spanclass="math inline">\(tim[i]\)</span> 表示一次性运 <spanclass="math inline">\(i\)</span>只玩具回家的时间，那么状态转移方程就是：<spanclass="math inline">\(dp[j] = min(dp[j],dp[j-i]+tim[i])\)</span>,最后输出 <span class="math inline">\(dp[n]\)</span></p><p><span class="math inline">\(tim[i]\)</span>的计算我们运用前缀和，由于每一次都要加上从家到商场的时间，所以我们在第一项<span class="math inline">\(tim[1]\)</span> 加上 <spanclass="math inline">\(2m\)</span> ,最后输出的时候再减去 <spanclass="math inline">\(m\)</span>​，因为最后一次不用从家到商场</p><p>复杂度： <span class="math inline">\(O(n^2)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-8a8zrom2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-8a8zrom2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long int</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n, m, w[maxn], tim[maxn], dp[maxn];<span class="hljs-comment">//dp 表示运完 j只所需要的最短时间</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     cin &gt;&gt; n &gt;&gt; m;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>     &#123;<br>          dp[i] = inf;<br>          cin &gt;&gt; w[i];<br>          tim[i] = w[i] + tim[i - <span class="hljs-number">1</span>];<br>          <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<br>          &#123;<br>               tim[i] += <span class="hljs-number">2</span> * m;<br>          &#125;<br>     &#125;<br><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-comment">//一次性运几只</span><br>     &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; ++j)<br>          &#123;<br>               dp[j] = <span class="hljs-built_in">min</span>(dp[j], dp[j - i] + tim[i]);<br>          &#125;<br>     &#125;<br><br>     cout &lt;&lt; dp[n] - m &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-comment">// std::ios::sync_with_stdio(false);</span><br>     <span class="hljs-comment">// cin.tie(0);</span><br>     <span class="hljs-comment">// cout.tie(0);</span><br>     <span class="hljs-built_in">solve</span>();<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f-01矩阵">F 01矩阵</h2><h3 id="考点-5">考点：</h3><ul><li>前缀和</li><li>二分</li></ul><h3 id="题解-5">题解：</h3><blockquote><p>简单题</p></blockquote><p>通过二维前缀和快速查询矩形内 <span class="math inline">\(1\)</span>的个数。用二分答案确认边长。</p><p>复杂度 <span class="math inline">\(O(n^2\log n)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-7xfo72m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-7xfo72m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; a;<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = x; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i][j] - a[i - x][j] - a[i][j - x] + a[i - x][j - x] == x * x)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    a.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            cin &gt;&gt; a[i][j];<br>            a[i][j] = a[i][j] + a[i - <span class="hljs-number">1</span>][j] + a[i][j - <span class="hljs-number">1</span>] - a[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-built_in">min</span>(n, m), ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>            ans = mid, l = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="g-简单问题">G 简单问题</h2><h3 id="考点-6">考点：</h3><ul><li>排序</li></ul><h3 id="题解-6">题解：</h3><blockquote><p>签到题</p></blockquote><p>一个数如果是 <span class="math inline">\(3\)</span>的倍数，那么它每个位上的数之和也是 <spanclass="math inline">\(3\)</span> 的倍数。</p><p>判断是不是 <span class="math inline">\(3\)</span> 的倍数后，可以用<span class="math inline">\(O(n\log n)\)</span>的排序或者计数排序将卡片降序排序即可。</p><p>复杂度： <span class="math inline">\(O(n\log n)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-froch7m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-froch7m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    string s;<br>    cin &gt;&gt; n &gt;&gt; s;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        t += s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>    <span class="hljs-keyword">if</span> (t % <span class="hljs-number">3</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">char</span>&gt;());<br>    cout &lt;&lt; s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="h-回文串">H 回文串</h2><h3 id="考点-7">考点：</h3><ul><li>基础语法</li></ul><h3 id="题解-7">题解：</h3><blockquote><p>签到题</p></blockquote><p>从两边开始一一比较。</p><p>如果两边都不是 <span class="math inline">\(?\)</span>且这两个位置的字母不同，则这个字符串不可能是回文串。</p><p>如果两边都是 <span class="math inline">\(?\)</span> 则有 <spanclass="math inline">\(26\)</span> 种可能。</p><p>如果只有一个 <span class="math inline">\(?\)</span> 则只有 <spanclass="math inline">\(1\)</span> 种可能。</p><p>复杂度： <span class="math inline">\(O(n)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ef8devm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-ef8devm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &lt;= j; i++, j--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] != s[j] &amp;&amp; s[i] != <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; s[j] != <span class="hljs-string">&#x27;?&#x27;</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; s[j] == <span class="hljs-string">&#x27;?&#x27;</span>)<br>            ans = (ans * <span class="hljs-number">26</span>) % mod;<br>    &#125;<br><br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="i-apple-catching-g">I Apple Catching G</h2><h3 id="考点-8">考点：</h3><ul><li>记忆化搜索</li></ul><h3 id="题解-8">题解：</h3><blockquote><p>中等题</p></blockquote><p>可以发现，每⼀时刻前，都可以移动，所以，每⼀时刻前往后，设</p><ul><li><span class="math inline">\(n_1\)</span> =(移动，移动之后，当前时刻能吃到的苹果 + 往后时刻能吃到的苹果)</li><li><span class="math inline">\(n_2\)</span> =(不移动，之后，在当前时刻能吃到的苹果 + 往后时刻能吃到的苹果)</li></ul><p>当前可以吃到的苹果的数量都等于 <spanclass="math inline">\(max(n_1,n_2)\)</span>，发现状态减少，可以⽤记忆化搜索递归下去（或者⽤<span class="math inline">\(dp\)</span>）</p><p>复杂度： <span class="math inline">\(O(NW)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ft1zhfm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-ft1zhfm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max_len 1010</span><br><span class="hljs-comment">// 苹果掉落的位置</span><br><span class="hljs-type">int</span> apple_location[max_len];<br><span class="hljs-type">int</span> N;<br><span class="hljs-comment">// 记忆化数组</span><br><span class="hljs-type">int</span> save_data[max_len][<span class="hljs-number">2</span>][<span class="hljs-number">40</span>];<br><span class="hljs-type">bool</span> is_visit[max_len][<span class="hljs-number">2</span>][<span class="hljs-number">40</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_max</span><span class="hljs-params">(<span class="hljs-type">int</span> now_i, <span class="hljs-type">int</span> now_in, <span class="hljs-type">int</span> can_move)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (now_i &gt;= N)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (is_visit[now_i][now_in][can_move] == <span class="hljs-literal">true</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> save_data[now_i][now_in][can_move];<br>        &#125;<br>        <span class="hljs-type">int</span> can_get = <span class="hljs-number">0</span>;<br><br>        can_get = (apple_location[now_i] == now_in) +<br>                  <span class="hljs-built_in">get_max</span>(now_i + <span class="hljs-number">1</span>, now_in, can_move);<br>        <span class="hljs-keyword">if</span> (can_move &gt; <span class="hljs-number">0</span>)<br>            can_get = <span class="hljs-built_in">max</span>(can_get, (apple_location[now_i] != now_in) +<br>                                       <span class="hljs-built_in">get_max</span>(now_i + <span class="hljs-number">1</span>, !now_in, can_move - <span class="hljs-number">1</span>));<br><br>        save_data[now_i][now_in][can_move] = can_get;<br>        is_visit[now_i][now_in][can_move] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> can_get;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> W;<br>    cin &gt;&gt; N &gt;&gt; W;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    &#123;<br>        cin &gt;&gt; apple_location[i];<br>        <span class="hljs-comment">// 使位置变为0和1，下个位置可用!操作</span><br>        apple_location[i]--;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">get_max</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, W) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="j-xor">J Xor</h2><h3 id="考点-9">考点：</h3><ul><li>位运算</li></ul><h3 id="题解-9">题解：</h3><blockquote><p>简单题</p></blockquote><h3 id="解法一暴力-o63-q">解法一：暴力 <span class="math inline">\(O(63* q)\)</span></h3><p>按照题意对每次操作对每一位进行异或</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ug7c43m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-ug7c43m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll x, q;<br>    cin &gt;&gt; x &gt;&gt; q;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br><br>        ll p = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            x ^= p &lt;&lt; i;<br>    &#125;<br>    cout &lt;&lt; x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="解法二差分-oq">解法二：差分 <spanclass="math inline">\(O(q)\)</span>​</h3><p>通过异或偶数次会还原的性质，差分后如果前缀和数组里是奇数则这位置需要异或。</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-18n7s7m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-18n7s7m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll x, q;<br>    cin &gt;&gt; x &gt;&gt; q;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">64</span>)</span></span>;<br><br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        a[l]++;<br>        a[r + <span class="hljs-number">1</span>]--;<br>    &#125;<br><br>    <span class="hljs-built_in">partial_sum</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), a.<span class="hljs-built_in">begin</span>());<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">63</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i] % <span class="hljs-number">2</span>)<br>            x ^= (<span class="hljs-number">1LL</span> &lt;&lt; i);<br>    &#125;<br><br>    cout &lt;&lt; x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>SZTU_ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>SZTU_ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SZTU_ACM2024寒期集训训练赛-基础组第二场</title>
    <link href="/archives/2254342841/"/>
    <url>/archives/2254342841/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://vjudge.net/contest/605921">寒期集训-基础组第二场</a></li></ul><h2 id="a---not-shading-codeforces---1627a">A - Not Shading <ahref="https://vjudge.net/problem/CodeForces-1627A/origin">CodeForces -1627A</a></h2><h3 id="思路">思路</h3><p>分类讨论</p><ul><li>如果目标格已经是黑色，直接输出 <spanclass="math inline">\(0\)</span></li><li>如果目标格的同行或者同列是黑色，输出 <spanclass="math inline">\(1\)</span></li><li>如果存在黑色格子，输出 <span class="math inline">\(2\)</span></li><li>其他则为 <span class="math inline">\(-1\)</span></li></ul><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-wsoblfm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-wsoblfm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">char</span> mp[<span class="hljs-number">111</span>][<span class="hljs-number">111</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, x, y;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            cin &gt;&gt; mp[i][j];<br><br>    <span class="hljs-keyword">if</span> (mp[x][y] == <span class="hljs-string">&#x27;B&#x27;</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (mp[k][y] == <span class="hljs-string">&#x27;B&#x27;</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= m; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (mp[x][k] == <span class="hljs-string">&#x27;B&#x27;</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;B&#x27;</span>)<br>            &#123;<br>                cout &lt;&lt; <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b---转圈游戏-洛谷---p1965">B - 转圈游戏 <ahref="https://vjudge.net/problem/%E6%B4%9B%E8%B0%B7-P1965/origin">洛谷 -P1965</a></h2><h3 id="思路-1">思路</h3><p>快速幂，如果求移动了多少位后对 <span class="math inline">\(n\)</span>取模，即求 <span class="math inline">\((x+m*10^k)\%n\)</span></p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-3ombksm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-3ombksm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> mod)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            res = <span class="hljs-number">1LL</span> * res * a % mod;<br>        a = <span class="hljs-number">1LL</span> * a * a % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, k, x;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; x;<br>    cout &lt;&lt; (x + <span class="hljs-number">1LL</span> * m * (<span class="hljs-built_in">qpow</span>(<span class="hljs-number">10</span>, k, n) % n) % n) % n &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c---broken-rounding-atcoder---abc273_b">C - Broken Rounding <ahref="https://vjudge.net/problem/AtCoder-abc273_b/origin">AtCoder -abc273_b</a></h2><h3 id="思路-2">思路</h3><p>从个位开始，向高位四舍五入直到第 <spanclass="math inline">\(k\)</span> 位</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-dfk4kem2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-dfk4kem2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll x;<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; x &gt;&gt; k;<br><br>    ll t = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        t *= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span> (x % t / (t / <span class="hljs-number">10</span>) &gt;= <span class="hljs-number">5</span>)<br>            x = x - x % t + t;<br>        <span class="hljs-keyword">else</span><br>            x = x - x % t;<br>    &#125;<br>    cout &lt;&lt; x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d---营救-洛谷---p1396">D - 营救 <ahref="https://vjudge.net/problem/%E6%B4%9B%E8%B0%B7-P1396/origin">洛谷 -P1396</a></h2><h3 id="思路-3">思路</h3><p>最小生成树，当 <span class="math inline">\(s\)</span> 和 <spanclass="math inline">\(t\)</span> 联通时即为答案</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ls9aqwm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-ls9aqwm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span><br>&#123;<br>    <span class="hljs-type">int</span> u, v, w;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Edge &amp;e) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; e.w;<br>    &#125;<br>&#125;;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; fa;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x == fa[x] ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]); &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, s, t;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br><br>    fa.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">iota</span>(fa.<span class="hljs-built_in">begin</span>(), fa.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br><br>    priority_queue&lt;Edge&gt; pq;<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        pq.<span class="hljs-built_in">push</span>(&#123;u, v, w&#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (!pq.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        Edge e = pq.<span class="hljs-built_in">top</span>();<br>        pq.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-type">int</span> fu = <span class="hljs-built_in">find</span>(e.u), fv = <span class="hljs-built_in">find</span>(e.v);<br>        <span class="hljs-keyword">if</span> (fu != fv)<br>        &#123;<br>            fa[fu] = fv;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(s) == <span class="hljs-built_in">find</span>(t))<br>            &#123;<br>                cout &lt;&lt; e.w &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e---welcome-to-atcoder-atcoder---abc151_c">E - Welcome toAtCoder <ahref="https://vjudge.net/problem/AtCoder-abc151_c/origin">AtCoder -abc151_c</a></h2><h3 id="思路-4">思路</h3><p>记录题目有没有 <span class="math inline">\(AC\)</span> 过，如果没<span class="math inline">\(AC\)</span> 过就累加 <spanclass="math inline">\(WA\)</span>的次数，最后遍历所有的题目，累加结果即可</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-4tt5udm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-4tt5udm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ac</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">wa</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> p;<br>        string s;<br>        cin &gt;&gt; p &gt;&gt; s;<br><br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;AC&quot;</span>)<br>            ac[p] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!ac[p])<br>            wa[p]++;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ac_cnt = <span class="hljs-number">0</span>, wa_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ac[i])<br>        &#123;<br>            ac_cnt++;<br>            wa_cnt += wa[i];<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ac_cnt &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; wa_cnt &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f---摄像头-洛谷---p2712">F - 摄像头 <ahref="https://vjudge.net/problem/%E6%B4%9B%E8%B0%B7-P2712/origin">洛谷 -P2712</a></h2><h3 id="思路-5">思路</h3><p>拓扑排序，记录这个摄像头有没有出现过，监视着哪些摄像头和被多少摄像头监视。</p><p>然后拓扑排序，入度为零且出现过的摄像头进队。</p><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-cqxi7im2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-cqxi7im2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">in</span><span class="hljs-params">(<span class="hljs-number">555</span>)</span>, <span class="hljs-title">out</span><span class="hljs-params">(<span class="hljs-number">555</span>)</span></span>;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">g</span>(<span class="hljs-number">555</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u, k;<br>        cin &gt;&gt; u &gt;&gt; k;<br>        out[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k--)<br>        &#123;<br>            <span class="hljs-type">int</span> v;<br>            cin &gt;&gt; v;<br>            in[v]++;<br>            g[u].<span class="hljs-built_in">push_back</span>(v);<br>        &#125;<br>    &#125;<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">500</span>; i++)<br>        <span class="hljs-keyword">if</span> (!in[i] &amp;&amp; out[i])<br>            q.<span class="hljs-built_in">push</span>(i);<br><br>    <span class="hljs-type">int</span> cnt = n;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        cnt--;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : g[u])<br>        &#123;<br>            in[v]--;<br>            <span class="hljs-keyword">if</span> (!in[v] &amp;&amp; out[v])<br>                q.<span class="hljs-built_in">push</span>(v);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>SZTU_ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>SZTU_ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SZTU_ACM2024寒期集训训练赛-基础组第一场</title>
    <link href="/archives/1127881834/"/>
    <url>/archives/1127881834/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://vjudge.net/contest/605450">寒期集训-基础组第一场</a></li></ul><h2 id="a---atcoder-cards-atcoder---abc301_c">A - AtCoder Cards <ahref="https://vjudge.net/problem/AtCoder-abc301_c/origin">AtCoder -abc301_c</a></h2><h3 id="思路">思路</h3><p>记录两个字符串每个字符出现的次数。如果非 <spanclass="math inline">\(@,\ a,\ t,\ c,\ o,\ d,\ e,\ r\)</span>字符出现次数不同直接为不可以。</p><p>对比 <span class="math inline">\(a,\ t,\ c,\ o,\ d,\ e,\ r\)</span>字符的出现差多少个，如果比 <span class="math inline">\(@\)</span>多则不可以，反之则可以。</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-wfbkfnm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-wfbkfnm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s, t;<br>    cin &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">200</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">200</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;i : s)<br>        a[i]++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;i : t)<br>        b[i]++;<br><br>    <span class="hljs-type">int</span> num = a[<span class="hljs-string">&#x27;@&#x27;</span>] + b[<span class="hljs-string">&#x27;@&#x27;</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;@&#x27;</span>)<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (a[i] != b[i])<br>        &#123;<br>            string tmp = <span class="hljs-string">&quot;atcoder&quot;</span>;<br>            <span class="hljs-keyword">if</span> (tmp.<span class="hljs-built_in">find</span>(i) == string::npos)<br>            &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                num -= <span class="hljs-built_in">abs</span>(a[i] - b[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (num &gt;= <span class="hljs-number">0</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b---perket-洛谷---p2036">B - PERKET <ahref="https://vjudge.net/problem/%E6%B4%9B%E8%B0%B7-P2036/origin">洛谷 -P2036</a></h2><h3 id="思路一">思路一</h3><p>深度优先搜索，判断所有的选择情况。每次有选和不选两种操作，分别搜索下去。当深度为<span class="math inline">\(n\)</span>的时候判断此时的酸度和苦度的绝对差，记录最小值即可。</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-sxil77m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-sxil77m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; acid, bitter;<br>vector&lt;<span class="hljs-type">bool</span>&gt; st;<br><span class="hljs-type">int</span> n, ans = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &gt; n)<br>    &#123;<br>        <span class="hljs-type">int</span> sum1 = <span class="hljs-number">1</span>, sum2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st[i])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                sum1 *= acid[i];<br>                sum2 += bitter[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)<br>            ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">abs</span>(sum1 - sum2));<br><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(x + <span class="hljs-number">1</span>);<br><br>    st[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs</span>(x + <span class="hljs-number">1</span>);<br>    st[x] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    acid.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>    bitter.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>    st.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; acid[i] &gt;&gt; bitter[i];<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="思路二">思路二</h3><p>因为只有选和不选两种情况，且 <span class="math inline">\(n \le10\)</span> 那么可以用二进制数表示。 <spanclass="math inline">\(1\)</span> 为选了， <spanclass="math inline">\(0\)</span> 为没选</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-hcuufmm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-hcuufmm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, ans = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">acid</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">bitter</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; acid[i] &gt;&gt; bitter[i];<br><br>    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; n); i++)<br>    &#123;<br>        ll t = i;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">0</span>, p = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (t)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                a *= acid[p];<br>                b += bitter[p];<br>            &#125;<br>            t &gt;&gt;= <span class="hljs-number">1</span>;<br>            p++;<br>        &#125;<br>        ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">abs</span>(a - b));<br>    &#125;<br><br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c---merge-sequences-atcoder---abc294_c">C - Merge Sequences <ahref="https://vjudge.net/problem/AtCoder-abc294_c/origin">AtCoder -abc294_c</a></h2><h3 id="思路-1">思路</h3><p>将两个序列合并后排序，然后二分查找下标即可</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-p2b6c4m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-p2b6c4m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span>, <span class="hljs-title">b</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>        cin &gt;&gt; b[j];<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; t = a;<br>    t.<span class="hljs-built_in">insert</span>(t.<span class="hljs-built_in">end</span>(), b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">sort</span>(t.<span class="hljs-built_in">begin</span>(), t.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cout &lt;&lt; <span class="hljs-built_in">lower_bound</span>(t.<span class="hljs-built_in">begin</span>(), t.<span class="hljs-built_in">end</span>(), a[i]) - t.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        cout &lt;&lt; <span class="hljs-built_in">lower_bound</span>(t.<span class="hljs-built_in">begin</span>(), t.<span class="hljs-built_in">end</span>(), b[i]) - t.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d---call-the-id-number-atcoder---abc293_b">D - Call the IDNumber <ahref="https://vjudge.net/problem/AtCoder-abc293_b/origin">AtCoder -abc293_b</a></h2><h3 id="思路-2">思路</h3><p>模拟过程，记录谁没被叫过即可。</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-xkq6v1m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-xkq6v1m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>            vis[a[i]] = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>            ans.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br><br>    cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : ans)<br>        cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e---k-swap-atcoder---abc254_c">E - K Swap <ahref="https://vjudge.net/problem/AtCoder-abc254_c/origin">AtCoder -abc254_c</a></h2><h3 id="思路-3">思路</h3><p>模拟过程，将每组排完序放回序列，判断最终序列是否满足严格升序</p><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-bbwfnem2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-bbwfnem2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; tmp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j += k)<br>            tmp.<span class="hljs-built_in">push_back</span>(a[j]);<br><br>        <span class="hljs-built_in">sort</span>(tmp.<span class="hljs-built_in">begin</span>(), tmp.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j += k)<br>        &#123;<br>            a[j] = tmp.<span class="hljs-built_in">back</span>();<br>            tmp.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; a[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f---01迷宫-洛谷---p1141">F - 01迷宫 <ahref="https://vjudge.net/problem/%E6%B4%9B%E8%B0%B7-P1141/origin">洛谷 -P1141</a></h2><h3 id="思路-4">思路</h3><p><span class="math inline">\(BFS\)</span>判断一个格子可以去到哪些格子，给这些点一个相同的编号，然后再从另一个没有编号的格子开始搜索，直到所有的格子都有编号，记录每个编号多少个格子。</p><p>最后通过查询编号对应的格子数即可得到结果</p><h3 id="code-6">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-fl161fm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-fl161fm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">char</span> mp[<span class="hljs-number">1111</span>][<span class="hljs-number">1111</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">1111</span>][<span class="hljs-number">1111</span>];<br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;, dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> id)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>    vis[x][y] = id;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>().first, y = q.<span class="hljs-built_in">front</span>().second;<br>        q.<span class="hljs-built_in">pop</span>();<br>        cnt++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> nx = x + dx[i], ny = y + dy[i];<br>            <span class="hljs-keyword">if</span> (nx &lt; <span class="hljs-number">1</span> || ny &lt; <span class="hljs-number">1</span> || nx &gt; n || ny &gt; n || vis[nx][ny] || mp[nx][ny] == mp[x][y])<br>                <span class="hljs-keyword">continue</span>;<br>            vis[nx][ny] = id;<br>            q.<span class="hljs-built_in">push</span>(&#123;nx, ny&#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            cin &gt;&gt; mp[i][j];<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-type">int</span> id = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!vis[i][j])<br>                ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">bfs</span>(i, j, id++));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        cout &lt;&lt; ans[vis[x][y]] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>SZTU_ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>SZTU_ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 920 (Div. 3)</title>
    <link href="/archives/115728041/"/>
    <url>/archives/115728041/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://codeforces.com/contest/1921">Codeforces Round 920(Div. 3)</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>横坐标的差值和纵坐标的差值之积</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-0cpv1fm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-0cpv1fm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        v.<span class="hljs-built_in">push_back</span>(&#123;a, b&#125;);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>    cout &lt;&lt; (v[<span class="hljs-number">3</span>].second - v[<span class="hljs-number">0</span>].second) * (v[<span class="hljs-number">3</span>].first - v[<span class="hljs-number">0</span>].first) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>两个字符串中 <span class="math inline">\(1\)</span>出现较少的个数加上两个字符串相差多少个 <spanclass="math inline">\(1\)</span> 即为答案</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ev7z1sm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-ev7z1sm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    string s, t;<br>    cin &gt;&gt; n &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == t[i] &amp;&amp; s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>            a++;<br>        <span class="hljs-keyword">if</span> (t[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>            b++;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">min</span>(a, b) + <span class="hljs-built_in">abs</span>(a - b) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>贪心，每步选择耗电最少的即可</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-dmmjrsm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-dmmjrsm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n, f, a, b;<br>    cin &gt;&gt; n &gt;&gt; f &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; v[i];<br><br>    ll now = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((v[i] - now) * a &gt; b)<br>            f -= b;<br>        <span class="hljs-keyword">else</span><br>            f -= (v[i] - now) * a;<br>        now = v[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (f &lt;= <span class="hljs-number">0</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>将两个序列排序后可知，对于每一个数 <spanclass="math inline">\(a_i\)</span> 选择的应该是最大或者最小的 <spanclass="math inline">\(b_i\)</span>，用双指针从两边向中间移动，每次选择差值最大的</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-0jft81m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-0jft81m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span>, <span class="hljs-title">c</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        cin &gt;&gt; c[i];<br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">sort</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = m - <span class="hljs-number">1</span>;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(a[i] - c[l]), <span class="hljs-built_in">abs</span>(a[i] - c[r])) &lt;= <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(a[j] - c[l]), <span class="hljs-built_in">abs</span>(a[j] - c[r])))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(a[j] - c[l]) &gt;= <span class="hljs-built_in">abs</span>(a[j] - c[r]))<br>            &#123;<br>                ans += <span class="hljs-built_in">abs</span>(a[j] - c[l]);<br>                l++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ans += <span class="hljs-built_in">abs</span>(a[j] - c[r]);<br>                r--;<br>            &#125;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(a[i] - c[l]) &gt;= <span class="hljs-built_in">abs</span>(a[i] - c[r]))<br>            &#123;<br>                ans += <span class="hljs-built_in">abs</span>(a[i] - c[l]);<br>                l++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ans += <span class="hljs-built_in">abs</span>(a[i] - c[r]);<br>                r--;<br>            &#125;<br>            i++;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>由题意可知，由于双方每次只能前进一步且不能后退或者停止，那么双方的交汇一定会在两者的中线，而谁吃谁由双方的初始距离决定。</p><ol type="1"><li>当双方一开始就是在同一排或者背对背，此时平局</li><li>当双方的初始距离为奇数时，只有 <spanclass="math inline">\(Alice\)</span> 可以吃掉 <spanclass="math inline">\(Bob\)</span> 的棋子。</li><li>当双方的初始距离为偶数时，只有 <spanclass="math inline">\(Bob\)</span> 可以吃掉 <spanclass="math inline">\(Alice\)</span> 的棋子。</li><li>当出现会被吃的可能时，判断被吃掉的棋子能否逃脱，通过棋子的可移动范围可以判断，能逃脱即为平局。</li></ol><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-n5nhxgm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-n5nhxgm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> h, w, x, y, xx, yy;<br>    cin &gt;&gt; h &gt;&gt; w &gt;&gt; x &gt;&gt; y &gt;&gt; xx &gt;&gt; yy;<br>    <span class="hljs-keyword">if</span> (x &gt;= xx)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Draw&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((xx - x) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> t = (xx - x) / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, yy - (t - <span class="hljs-number">1</span>)) &gt;= <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, y - t) &amp;&amp; <span class="hljs-built_in">min</span>(w, yy + (t - <span class="hljs-number">1</span>)) &lt;= <span class="hljs-built_in">min</span>(w, y + t))<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Alice&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> t = (xx - x) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, y - t) &gt;= <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, yy - t) &amp;&amp; <span class="hljs-built_in">min</span>(w, y + t) &lt;= <span class="hljs-built_in">min</span>(w, yy + t))<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Bob&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Draw&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 337</title>
    <link href="/archives/3994262799/"/>
    <url>/archives/3994262799/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://atcoder.jp/contests/abc337">AtCoder BeginnerContest 337</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>直接累加总分即可</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ru9426m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-ru9426m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, X, Y, x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        cin &gt;&gt; X &gt;&gt; Y;<br>        x += X, y += Y;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; y)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Takahashi&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &lt; y)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Aoki&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Draw&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>将长度和字符串 <span class="math inline">\(S\)</span> 的所有扩展<span class="math inline">\(ABC\)</span> 字符串构造出来，看是否出现和<span class="math inline">\(S\)</span> 相同的字符串</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-r1gocvm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-r1gocvm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= s.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= s.<span class="hljs-built_in">size</span>() - i; j++)<br>        &#123;<br>            string tmp;<br>            tmp = <span class="hljs-built_in">string</span>(i, <span class="hljs-string">&#x27;A&#x27;</span>) + <span class="hljs-built_in">string</span>(j, <span class="hljs-string">&#x27;B&#x27;</span>) + <span class="hljs-built_in">string</span>(s.<span class="hljs-built_in">size</span>() - i - j, <span class="hljs-string">&#x27;C&#x27;</span>);<br>            flag |= (tmp == s);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>新开数组 <span class="math inline">\(b\)</span> 存数组 <spanclass="math inline">\(a\)</span> 中每个数的下标，顺着数组 <spanclass="math inline">\(b\)</span> 输出即可</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-6kjlzxm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-6kjlzxm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-type">int</span> now;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">-1</span>)<br>            now = i;<br>        <span class="hljs-keyword">else</span><br>            b[a[i]] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; now &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        now = b[now];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>分别遍历每行和每列，用前缀和分别记录 <code>.</code> 和 <code>x</code>出现的次数，如果这段出现过 <code>x</code>则不考虑，如果没出现过就看出现了多少 <code>.</code> ，最少即为答案。</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-auvy3km2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-auvy3km2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, k;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt; <span class="hljs-built_in">mp</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;(m + <span class="hljs-number">1</span>));<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(N)</span>, <span class="hljs-title">b</span><span class="hljs-params">(N)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            cin &gt;&gt; mp[i][j];<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0x3f3f3f3f</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, b[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            a[j] = a[j - <span class="hljs-number">1</span>] + (mp[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>);<br>            b[j] = b[j - <span class="hljs-number">1</span>] + (mp[i][j] == <span class="hljs-string">&#x27;x&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = k; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (b[j] - b[j - k] == <span class="hljs-number">0</span>)<br>                ans = <span class="hljs-built_in">min</span>(ans, a[j] - a[j - k]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, b[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            a[j] = a[j - <span class="hljs-number">1</span>] + (mp[j][i] == <span class="hljs-string">&#x27;.&#x27;</span>);<br>            b[j] = b[j - <span class="hljs-number">1</span>] + (mp[j][i] == <span class="hljs-string">&#x27;x&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = k; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (b[j] - b[j - k] == <span class="hljs-number">0</span>)<br>                ans = <span class="hljs-built_in">min</span>(ans, a[j] - a[j - k]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">0x3f3f3f3f</span>)<br>        cout &lt;&lt; <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>经典老鼠喝药问题（筛选特例问题）</p><p>对输入的 <span class="math inline">\(N\)</span> 求 <spanclass="math inline">\(N - 1\)</span>的二进制位数，位数即为需要的人数</p><p>将朋友排成一排，按编号喝对应二进制位为 <spanclass="math inline">\(1\)</span> 的饮料，如：对于编号为 <spanclass="math inline">\(2\)</span> 的朋友，他需要喝第 <spanclass="math inline">\(3\)</span> 和第 <spanclass="math inline">\(6\)</span> 杯，因为 <spanclass="math inline">\(3\)</span> 的二进制数为 <spanclass="math inline">\(11\)</span> ，<spanclass="math inline">\(6\)</span> 的二进制数为 <spanclass="math inline">\(110\)</span> 他们的第二位都是 <spanclass="math inline">\(1\)</span>。以此类推。需要注意的是，此时饮料的编号是从 <spanclass="math inline">\(0\)</span> 开始的，因为 <spanclass="math inline">\(0\)</span>号饮料并不需要有人喝，但是题目中的饮料编号是从 <spanclass="math inline">\(1\)</span> 开始的。</p><p>对于题目返回的一个 <span class="math inline">\(01\)</span> 串 <spanclass="math inline">\(s\)</span>，我们将其转化为十进制即为坏掉的饮料的编号，此时的编号是从 <spanclass="math inline">\(0\)</span> 开始的，题目的编号是从 <spanclass="math inline">\(1\)</span> 开始的，所以需要 <spanclass="math inline">\(+1\)</span></p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-b7vkzrm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-b7vkzrm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">0</span>, t = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (t)<br>    &#123;<br>        m++;<br>        t /= <span class="hljs-number">2</span>;<br>    &#125;<br>    cout &lt;&lt; m &lt;&lt; endl;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">v</span>(m + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">1</span>, tmp = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (tmp &lt; n)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &amp; tmp)<br>                v[p].<span class="hljs-built_in">push_back</span>(i);<br>            p++;<br>            tmp *= <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        cout &lt;&lt; v[i].<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : v[i])<br>            cout &lt;&lt; j + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    string s;<br>    cin &gt;&gt; s;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> tmp = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>            &#123;<br>                tmp *= <span class="hljs-number">2</span>;<br>            &#125;<br>            ans += tmp;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最短路</title>
    <link href="/archives/4061592254/"/>
    <url>/archives/4061592254/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align: center;">最短路算法</th><th style="text-align: center;"><spanclass="math inline">\(SPFA\)</span></th><th style="text-align: center;"><spanclass="math inline">\(Dijkstra\)</span></th><th style="text-align: center;"><spanclass="math inline">\(Johnson\)</span></th></tr></thead><tbody><tr><td style="text-align: center;">最短路类型</td><td style="text-align: center;">单源最短路</td><td style="text-align: center;">单源最短路</td><td style="text-align: center;">每对结点之间的最短路</td></tr><tr><td style="text-align: center;">作用于</td><td style="text-align: center;">任意图</td><td style="text-align: center;">非负权图</td><td style="text-align: center;">任意图</td></tr><tr><td style="text-align: center;">能否检测负环？</td><td style="text-align: center;">能</td><td style="text-align: center;">不能</td><td style="text-align: center;">能</td></tr><tr><td style="text-align: center;">时间复杂度</td><td style="text-align: center;"><spanclass="math inline">\(O(NM)\)</span></td><td style="text-align: center;"><span class="math inline">\(O(M\logM)\)</span></td><td style="text-align: center;"><span class="math inline">\(O(NM\logM)\)</span></td></tr></tbody></table><h2 id="dijkstra">Dijkstra</h2><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-zukbn8m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-zukbn8m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x7fffffff</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>; <span class="hljs-comment">// 点</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>; <span class="hljs-comment">// 边</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> dis, id;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> dis &gt; a.dis; &#125;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> d, <span class="hljs-type">int</span> x) &#123; dis = d, id = x; &#125;<br>&#125;;<br><br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; g[N];<br><span class="hljs-type">int</span> dis[N];<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> n, m, k; <span class="hljs-comment">// k 出发点</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;node&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        dis[i] = INF;<br>    dis[k] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(<span class="hljs-number">0</span>, k));<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">top</span>().id;<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (vis[u])<br>            <span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; g[u].<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-type">int</span> v = g[u][i].first, w = g[u][i].second;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>            <span class="hljs-keyword">if</span> (!vis[v])<br>        q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(dis[v], v));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cout &lt;&lt; dis[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="spfa">SPFA</h2><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-fq1y96m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-fq1y96m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; e[N];<br><span class="hljs-type">int</span> dis[N], cnt[N], vis[N];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(dis));<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    dis[s] = <span class="hljs-number">0</span>, vis[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        vis[u] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; e[u].<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-type">int</span> v = e[u][i].first, w = e[u][i].second;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                cnt[v] = cnt[u] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 记录最短路经过的边数</span><br>                <span class="hljs-keyword">if</span> (cnt[v] &gt;= n)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">// 在不经过负环的情况下，最短路至多经过 n - 1 条边</span><br>                <span class="hljs-comment">// 因此如果经过了多于 n 条边，一定说明经过了负环</span><br>                <span class="hljs-keyword">if</span> (!vis[v])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(v);<br>                    vis[v] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="johnson">Johnson</h2><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-pda8ehm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-pda8ehm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 1e9</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span><br>&#123;<br>    <span class="hljs-type">int</span> v, w;<br>    <span class="hljs-built_in">edge</span>(<span class="hljs-type">int</span> _v, <span class="hljs-type">int</span> _w) : <span class="hljs-built_in">v</span>(_v), <span class="hljs-built_in">w</span>(_w) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> dis, id;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> dis &gt; a.dis; &#125;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> d, <span class="hljs-type">int</span> x) : <span class="hljs-built_in">dis</span>(d), <span class="hljs-built_in">id</span>(x) &#123;&#125;<br>&#125;;<br><br>vector&lt;vector&lt;edge&gt;&gt; adj;<br>vector&lt;<span class="hljs-type">int</span>&gt; vis, t;<br>vector&lt;ll&gt; h, dis;<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    adj[u].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">edge</span>(v, w));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    h.<span class="hljs-built_in">assign</span>(h.<span class="hljs-built_in">size</span>(), INF);<br>    h[s] = <span class="hljs-number">0</span>;<br>    vis[s] = <span class="hljs-number">1</span>;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        vis[u] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;e : adj[u])<br>        &#123;<br>            <span class="hljs-type">int</span> v = e.v, w = e.w;<br>            <span class="hljs-keyword">if</span> (h[v] &gt; h[u] + w)<br>            &#123;<br>                h[v] = h[u] + w;<br>                <span class="hljs-keyword">if</span> (!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-number">1</span>;<br>                    q.<span class="hljs-built_in">push</span>(v);<br>                    t[v]++;<br>                    <span class="hljs-keyword">if</span> (t[v] == n + <span class="hljs-number">1</span>)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;node&gt; q;<br>    dis.<span class="hljs-built_in">assign</span>(dis.<span class="hljs-built_in">size</span>(), INF);<br>    vis.<span class="hljs-built_in">assign</span>(vis.<span class="hljs-built_in">size</span>(), <span class="hljs-number">0</span>);<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(<span class="hljs-number">0</span>, s));<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">top</span>().id;<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (vis[u])<br>            <span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;e : adj[u])<br>        &#123;<br>            <span class="hljs-type">int</span> v = e.v, w = e.w;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span> (!vis[v])<br>                    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(dis[v], v));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    cin &gt;&gt; n &gt;&gt; m;<br>    adj.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>    vis.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>    t.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>    h.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>    dis.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-built_in">addedge</span>(u, v, w);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">addedge</span>(<span class="hljs-number">0</span>, i, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">spfa</span>(<span class="hljs-number">0</span>))<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; u++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;e : adj[u])<br>            e.w += h[u] - h[e.v];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">dijkstra</span>(i);<br>        ll ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (dis[j] == INF)<br>                ans += j * INF;<br>            <span class="hljs-keyword">else</span><br>                ans += j * (dis[j] + h[j] - h[i]);<br>        &#125;<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>模板</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 918 (Div. 4)</title>
    <link href="/archives/3281088155/"/>
    <url>/archives/3281088155/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://codeforces.com/contest/1915">Codeforces Round 918(Div. 4)</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>输出不和另外两个不相同的即可</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-uef8aom2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-uef8aom2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-keyword">if</span> (a == b)<br>        cout &lt;&lt; c &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == c)<br>        cout &lt;&lt; b &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>输出出现次数为 <span class="math inline">\(2\)</span> 的字符</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-b9gkgdm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-b9gkgdm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>    &#123;<br>        <span class="hljs-type">char</span> ch;<br>        cin &gt;&gt; ch;<br>        mp[ch]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x : mp)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (x.second == <span class="hljs-number">2</span>)<br>            cout &lt;&lt; x.first &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>累加所有的方块数，通过二分判断是不是平方数</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-styl2jm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-styl2jm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        sum += x;<br>    &#125;<br><br>    ll l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1e9</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (mid * mid &gt;= sum)<br>            ans = mid, r = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (ans * ans == sum)<br>        cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>在除了第一个的每一个 <code>a</code> 或者 <code>e</code>的前一个字符之前加个 <code>.</code> ，直接判断下两个字符是不是<code>a</code> 或者 <code>e</code> 是就加点即可</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-xsu6kmm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-xsu6kmm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    string s;<br>    cin &gt;&gt; n &gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        cout &lt;&lt; s[i];<br>        <span class="hljs-keyword">if</span> (s[i + <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;a&#x27;</span> || s[i + <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>            cout &lt;&lt; <span class="hljs-string">&#x27;.&#x27;</span>;<br>    &#125;<br>    cout &lt;&lt; s[n - <span class="hljs-number">2</span>] &lt;&lt; s[n - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>将奇偶不同的玻璃杯容量异号，易知如果这个区间满足条件，则区间和为<span class="math inline">\(0\)</span> 。通过前缀和即可判断。</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-mh8673m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-mh8673m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>)<br>            a[i] = -a[i];<br>    &#125;<br><br>    <span class="hljs-built_in">partial_sum</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), a.<span class="hljs-built_in">begin</span>());<br><br>    set&lt;ll&gt; st;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">count</span>(a[i]) || a[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        st.<span class="hljs-built_in">insert</span>(a[i]);<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f">F</h2><h3 id="思路-5">思路</h3><p>易知，如果两个人会打招呼则一个人行走的区间一定被另一个人包含。</p><p>将右端点排序，然后从左端点最小的区间开始遍历，二分查找到右端点在数组的下标即有多少区间的右端点更小，然后删除这个右端点，使数组内的区间都是左端点大于当前的左端点的。</p><p>累加查找到的下标即为答案</p><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-u4csz8m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-u4csz8m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        mp[a] = b;<br>        v.<span class="hljs-built_in">push_back</span>(b);<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : mp)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> pos = <span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), it.second);<br>        ans += (pos - v.<span class="hljs-built_in">begin</span>());<br>        v.<span class="hljs-built_in">erase</span>(pos);<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="g">G</h2><h3 id="思路-6">思路</h3><p>优先队列优化的 <span class="math inline">\(Dijkstra\)</span> 。</p><p><code>dis[u][t]</code> 表示从 <span class="math inline">\(1\)</span>到 <span class="math inline">\(u\)</span> 使用 <spanclass="math inline">\(t\)</span> 城市的自行车的所花费的时间。</p><p>每次到新的城市，如果这里的自行车更优则更新自行车。<code>d + 1LL * s[t] * w</code>表示到达 <span class="math inline">\(j\)</span> 的所花费的时间。</p><h3 id="code-6">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-wz49dem2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-wz49dem2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    ll d;<br>    <span class="hljs-type">int</span> u, t;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;a, <span class="hljs-type">const</span> node &amp;b)<br>    &#123;<br>        <span class="hljs-keyword">return</span> a.d &gt; b.d;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    vector&lt;vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">g</span>(n + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        g[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;);<br>        g[v].<span class="hljs-built_in">push_back</span>(&#123;u, w&#125;);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">s</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; s[i];<br><br>    vector&lt;vector&lt;ll&gt;&gt; <span class="hljs-built_in">dis</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;ll&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>));<br>    priority_queue&lt;node&gt; q;<br><br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> [d, u, t] = q.<span class="hljs-built_in">top</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (dis[u][t] != <span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        dis[u][t] = d;<br><br>        <span class="hljs-keyword">if</span> (u == n)<br>        &#123;<br>            cout &lt;&lt; d &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [j, w] : g[u])<br>        &#123;<br>            <span class="hljs-type">int</span> b = (s[j] &lt; s[t] ? j : t);<br>            <span class="hljs-keyword">if</span> (dis[j][b] == <span class="hljs-number">-1</span>)<br>                q.<span class="hljs-built_in">push</span>(&#123;d + <span class="hljs-number">1LL</span> * s[t] * w, j, b&#125;);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 334</title>
    <link href="/archives/1998245045/"/>
    <url>/archives/1998245045/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://atcoder.jp/contests/abc334">AtCoder BeginnerContest 334</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>比较大小输出即可。</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-p9wq7ym2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-p9wq7ym2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">if</span> (a &gt; b)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Bat&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Glove&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>给定 <span class="math inline">\(a,m,l,r\)</span> ，问有多少个整数<span class="math inline">\(k\)</span> 满足 <spanclass="math inline">\(l \le a+mk \le r\)</span> .</p><p>将 <span class="math inline">\(l\)</span> 和 <spanclass="math inline">\(r\)</span> 同时减去 <spanclass="math inline">\(a\)</span> ，即可以认为树是从 <spanclass="math inline">\(0\)</span> 点开始种的</p><p>此时有两种情况，记 <span class="math inline">\(sum(x,y)\)</span> 为<span class="math inline">\((x,y]\)</span> 范围内有多少颗树：</p><ol type="1"><li>当 <span class="math inline">\(l\)</span> 和 <spanclass="math inline">\(r\)</span> 在 <spanclass="math inline">\(0\)</span> 的同一侧时，<code>ans = sum(1, max(l, r)) - sum(1, min(l, r) - 1)</code>，即长的一段减去短的一段</li><li>当 <span class="math inline">\(l\)</span> 和 <spanclass="math inline">\(r\)</span> 不在 <spanclass="math inline">\(0\)</span> 的同一侧时，<code>ans = sum(1, l) + sum(1, r) + 1</code> ，即两段加上 <spanclass="math inline">\(0\)</span> 点</li></ol><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-lgghs7m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-lgghs7m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll a, m, l, r;<br>    cin &gt;&gt; a &gt;&gt; m &gt;&gt; l &gt;&gt; r;<br>    l -= a, r -= a;<br><br>    <span class="hljs-keyword">if</span> (l &lt;= <span class="hljs-number">0</span> &amp;&amp; r &gt;= <span class="hljs-number">0</span>)<br>        cout &lt;&lt; (<span class="hljs-built_in">abs</span>(l) / m) + (<span class="hljs-built_in">abs</span>(r) / m) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(l), <span class="hljs-built_in">abs</span>(r)) / m - (<span class="hljs-built_in">min</span>(<span class="hljs-built_in">abs</span>(l), <span class="hljs-built_in">abs</span>(r)) - <span class="hljs-number">1</span>) / m;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>对于已经成对的袜子，如果拆开并不会更优</p><p>对于单只的袜子，按从小到大排序，两两配对即为最优</p><ul><li>对于偶数个袜子，两两配对即可</li><li>对于奇数个袜子，可以舍弃一只，发现对于舍弃的这只前后两边一定各是偶数个袜子。可以预处理从后两两配对的结果，然后从头遍历一遍可能舍弃的袜子，同时维护前面配对的结果。</li></ul><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-1778kqm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-1778kqm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(k)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)<br>        cin &gt;&gt; v[i];<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (k % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i += <span class="hljs-number">2</span>)<br>            ans += v[i + <span class="hljs-number">1</span>] - v[i];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-number">2</span>)<br>            sum += v[i] - v[i - <span class="hljs-number">1</span>];<br>        ans = sum;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; i += <span class="hljs-number">2</span>)<br>        &#123;<br>            sum -= v[i + <span class="hljs-number">2</span>] - v[i + <span class="hljs-number">1</span>];<br>            sum += v[i + <span class="hljs-number">1</span>] - v[i];<br>            ans = <span class="hljs-built_in">min</span>(ans, sum);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>显然我们应该选择先拉需要麋鹿最少的雪橇</p><p>按所需麋鹿数量 <span class="math inline">\(r_i\)</span>升序排序后，找到最大的 <span class="math inline">\(k\)</span> 满足 <spanclass="math inline">\(\sum^k_{i=1} r_i\le x\)</span></p><p>建立关于 <span class="math inline">\(r_i\)</span>的前缀和数组，在其中二分查找不大于 <spanclass="math inline">\(x\)</span> 的最大值即可</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-3v1ajhm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-3v1ajhm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, q;<br>    cin &gt;&gt; n &gt;&gt; q;<br><br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">partial_sum</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), a.<span class="hljs-built_in">begin</span>());<br><br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        ll x;<br>        cin &gt;&gt; x;<br>        cout &lt;&lt; <span class="hljs-built_in">upper_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), x) - a.<span class="hljs-built_in">begin</span>() &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>先通过 <span class="math inline">\(DFS\)</span>标记每个连通块，并记录总共的连通块个数 <spanclass="math inline">\(cnt\)</span> 。</p><p>然后遍历每一个 <code>.</code> ，算出将其改变为 <code>#</code>对连通块个数的影响。很显然，四个方向如果有 <spanclass="math inline">\(x\)</span>个不同的联通块，那么此时连通块的数量就变为了 <spanclass="math inline">\(cnt+1-x\)</span> 。</p><p>累加每个情况连通块的数量，除以 <code>.</code> 的个数对 <spanclass="math inline">\(998244353\)</span> 取模后即为答案</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-wtgydvm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-wtgydvm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">char</span> mp[N][N];<br><span class="hljs-type">int</span> vis[N][N];<br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> n, m, cnt, fm;<br>ll sum;<br><br><span class="hljs-function">ll <span class="hljs-title">quickpow</span><span class="hljs-params">(ll a, ll n, ll mod)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; n; n &gt;&gt;= <span class="hljs-number">1</span>, a = <span class="hljs-number">1LL</span> * a * a % mod)<br>        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)<br>            ret = <span class="hljs-number">1LL</span> * ret * a % mod;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> id)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x &gt;= n || y &lt; <span class="hljs-number">0</span> || y &gt;= m || vis[x][y] || mp[x][y] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        <span class="hljs-keyword">return</span>;<br><br>    vis[x][y] = id;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<br>        <span class="hljs-built_in">dfs</span>(x + dx[k], y + dy[k], id);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    set&lt;<span class="hljs-type">int</span>&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<br>    &#123;<br>        <span class="hljs-type">int</span> nx = x + dx[k], ny = y + dy[k];<br>        <span class="hljs-keyword">if</span> (nx &lt; <span class="hljs-number">0</span> || nx &gt;= n || ny &lt; <span class="hljs-number">0</span> || ny &gt;= m || mp[nx][ny] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>            <span class="hljs-keyword">continue</span>;<br><br>        s.<span class="hljs-built_in">insert</span>(vis[nx][ny]);<br>    &#125;<br>    sum += cnt + <span class="hljs-number">1</span> - s.<span class="hljs-built_in">size</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>            cin &gt;&gt; mp[i][j];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; !vis[i][j])<br>                <span class="hljs-built_in">dfs</span>(i, j, ++cnt);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                fm++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                <span class="hljs-built_in">check</span>(i, j);<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; sum % <span class="hljs-function">mod * <span class="hljs-title">quickpow</span><span class="hljs-params">(fm, mod - <span class="hljs-number">2</span>, mod)</span> % mod</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f">F</h2><h3 id="思路-5">思路</h3><blockquote><p>待补</p></blockquote><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-47g860m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-47g860m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 333</title>
    <link href="/archives/3917371670/"/>
    <url>/archives/3917371670/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://atcoder.jp/contests/abc333">AtCoder BeginnerContest 333</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>根据题意模拟</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-19r0v7m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-19r0v7m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cout &lt;&lt; n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>求两点之间最短距离，判断即可</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-g78c4ym2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-g78c4ym2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> a, b, c, d;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">min</span>(<span class="hljs-number">5</span> - <span class="hljs-built_in">abs</span>(a - b), <span class="hljs-built_in">abs</span>(a - b));<br>    <span class="hljs-type">int</span> y = <span class="hljs-built_in">min</span>(<span class="hljs-number">5</span> - <span class="hljs-built_in">abs</span>(c - d), <span class="hljs-built_in">abs</span>(c - d));<br><br>    cout &lt;&lt; (x == y ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>暴搜所有结果，这里使用 <code>set</code> 去重。</p><p>也可以使用数组存储后遍历求解</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-o62wc5m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-o62wc5m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br>ll a[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">111</span>, <span class="hljs-number">1111</span>, <span class="hljs-number">11111</span>, <span class="hljs-number">111111</span>, <span class="hljs-number">1111111</span>, <span class="hljs-number">11111111</span>, <span class="hljs-number">111111111</span>, <span class="hljs-number">1111111111</span>, <span class="hljs-number">11111111111</span>, <span class="hljs-number">111111111111</span>&#125;;<br>set&lt;ll&gt; ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">12</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">12</span>; k++)<br>            &#123;<br>                ans.<span class="hljs-built_in">insert</span>(a[i] + a[j] + a[k]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : ans)<br>    &#123;<br>        cnt++;<br>        <span class="hljs-keyword">if</span> (cnt == n)<br>        &#123;<br>            cout &lt;&lt; it;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>建树，遍历节点 <span class="math inline">\(1\)</span>所能访问的所有结点，如果 <span class="math inline">\(1\)</span>的子树数量为 <span class="math inline">\(1\)</span> 则直接删除节点 <spanclass="math inline">\(1\)</span>即可，否则遍历所有子树，求出每个子树的结点个数，输出除了结点最多的那颗树的其余结点个数</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-dznyd9m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-dznyd9m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; g[N];<br><span class="hljs-type">int</span> n, maxn, cnt;<br><span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(N)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt = <span class="hljs-number">0</span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(x);<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cnt++;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : g[u])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!vis[v])<br>            &#123;<br>                vis[v] = <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        g[a].<span class="hljs-built_in">push_back</span>(b);<br>        g[b].<span class="hljs-built_in">push_back</span>(a);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (g[<span class="hljs-number">1</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)<br>        cout &lt;&lt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : g[<span class="hljs-number">1</span>])<br>        &#123;<br>            vis[u] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">bfs</span>(u);<br>            maxn = <span class="hljs-built_in">max</span>(maxn, cnt);<br>        &#125;<br>        cout &lt;&lt; n - maxn;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>从后面开始遍历，用 <code>map</code>存出现的怪物的类型以及个数，同时增加携带的药水量也是需要的药水量，前面如果出现这个类型的药水，就减少身上的药水，说明这个类型的药水是这个时候捡起来的。遍历结束后，如果需要的药水量大于<span class="math inline">\(0\)</span> 说明无法打败所有的怪物，输出<span class="math inline">\(-1\)</span>。反之则将捡起药水的顺序倒序输出</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-7apl0am2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-7apl0am2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> t, x;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;node&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; v[i].t &gt;&gt; v[i].x;<br><br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    vector&lt;<span class="hljs-type">int</span>&gt; ansv;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v[i].t == <span class="hljs-number">2</span>)<br>        &#123;<br>            mp[v[i].x]++;<br>            cnt++;<br>            ans = <span class="hljs-built_in">max</span>(ans, cnt);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v[i].t == <span class="hljs-number">1</span> &amp;&amp; mp[v[i].x])<br>        &#123;<br>            mp[v[i].x]--;<br>            cnt--;<br>            ansv.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v[i].t == <span class="hljs-number">1</span>)<br>            ansv.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(<span class="hljs-built_in">all</span>(ansv));<br><br>    <span class="hljs-keyword">if</span> (cnt)<br>        cout &lt;&lt; <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : ansv)<br>            cout &lt;&lt; it &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f">F</h2><h3 id="思路-5">思路</h3><blockquote><p>待补</p></blockquote><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-eikpb0m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-eikpb0m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 332</title>
    <link href="/archives/2658756992/"/>
    <url>/archives/2658756992/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://atcoder.jp/contests/abc332">AtCoder BeginnerContest 332</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>累加费用，如果总价小于 <span class="math inline">\(S\)</span>则加上运费 <span class="math inline">\(K\)</span></p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-esg7rmm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-esg7rmm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, s, k;<br>    cin &gt;&gt; n &gt;&gt; s &gt;&gt; k;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        ans += x * y;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans &lt; s)<br>        ans += k;<br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>根据题意模拟</p><p>执行 <span class="math inline">\(K\)</span> 次以下操作：</p><ul><li>如果玻璃杯是满的，清空玻璃杯</li><li>否则，如果马克杯是空的，装满马克杯</li><li>否则，将马克杯里的水倒进玻璃杯，直到马克杯为空或者玻璃杯满了</li></ul><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-aswe0mm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-aswe0mm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k, g, m;<br>    cin &gt;&gt; k &gt;&gt; g &gt;&gt; m;<br>    <span class="hljs-type">int</span> gg = <span class="hljs-number">0</span>, mm = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (k--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (gg == g)<br>            gg = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mm == <span class="hljs-number">0</span>)<br>            mm = m;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">min</span>(g - gg, mm);<br>            mm -= t;<br>            gg += t;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; gg &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; mm;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>根据题意模拟</p><p>出现 <span class="math inline">\(0\)</span> 重置衣服的数量，出现<span class="math inline">\(1\)</span> 优先用纯色，没有衣服可穿就返回<span class="math inline">\(false\)</span></p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-2gq5j9m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-2gq5j9m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br>string s;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = m, b = x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>            a = m, b = x;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a)<br>                a--;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b)<br>                b--;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (b)<br>                b--;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1000</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(i))<br>        &#123;<br>            cout &lt;&lt; i;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p><span class="math inline">\(BFS\)</span> 搜索</p><p>用嵌套 <span class="math inline">\(STL\)</span> 进行操作简单方便</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-jdvhvbm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-jdvhvbm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">a</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>            cin &gt;&gt; a[i][j];<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">b</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>            cin &gt;&gt; b[i][j];<br><br>    <span class="hljs-type">int</span> ans = INF;<br>    map&lt;vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;, <span class="hljs-type">int</span>&gt; vis;<br>    queue&lt;pair&lt;vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;, <span class="hljs-type">int</span>&gt;&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;a, <span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; now = q.<span class="hljs-built_in">front</span>().first;<br>        <span class="hljs-type">int</span> cnt = q.<span class="hljs-built_in">front</span>().second;<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (now == b)<br>        &#123;<br>            ans = <span class="hljs-built_in">min</span>(ans, cnt);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            <span class="hljs-built_in">swap</span>(now[i], now[i + <span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span> (vis[now] == <span class="hljs-number">0</span>)<br>            &#123;<br>                vis[now] = <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(&#123;now, cnt + <span class="hljs-number">1</span>&#125;);<br>            &#125;<br>            <span class="hljs-built_in">swap</span>(now[i], now[i + <span class="hljs-number">1</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>                <span class="hljs-built_in">swap</span>(now[i][j], now[i][j + <span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span> (vis[now] == <span class="hljs-number">0</span>)<br>            &#123;<br>                vis[now] = <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(&#123;now, cnt + <span class="hljs-number">1</span>&#125;);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>                <span class="hljs-built_in">swap</span>(now[i][j], now[i][j + <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; (ans != INF ? ans : <span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><blockquote><p>待补</p></blockquote><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ggx6vjm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-ggx6vjm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 331</title>
    <link href="/archives/124794938/"/>
    <url>/archives/124794938/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://atcoder.jp/contests/abc331">AtCoder BeginnerContest 331</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>简单模拟日期的变化</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-k2vhc0m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-k2vhc0m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> mm, dd;<br>    cin &gt;&gt; mm &gt;&gt; dd;<br>    <span class="hljs-type">int</span> y, m, d;<br>    cin &gt;&gt; y &gt;&gt; m &gt;&gt; d;<br>    d++;<br>    <span class="hljs-keyword">if</span> (d == dd + <span class="hljs-number">1</span>)<br>        d = <span class="hljs-number">1</span>, m++;<br>    <span class="hljs-keyword">if</span> (m == mm + <span class="hljs-number">1</span>)<br>        m = <span class="hljs-number">1</span>, y++;<br>    cout &lt;&lt; y &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; m &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>遍历所有可能取最小值即可</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-t9ytscm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-t9ytscm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, a, b, c;<br>    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br><br>    <span class="hljs-type">int</span> ans = INF;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">20</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">20</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">20</span>; k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> * i + <span class="hljs-number">8</span> * j + <span class="hljs-number">12</span> * k &gt;= n)<br>                    ans = <span class="hljs-built_in">min</span>(ans, i * a + j * b + k * c);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>计数排序，然后做出后缀和，直接查询即可</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-qrvbw4m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-qrvbw4m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">sum</span><span class="hljs-params">(N)</span>, <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        sum[a[i]]++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1000000</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>        sum[i] = sum[i + <span class="hljs-number">1</span>] + sum[i] * i;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cout &lt;&lt; sum[a[i] + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>先预处理 <span class="math inline">\(n*n\)</span>的范围内的二维前缀和</p><p>记以 <span class="math inline">\((0,0)\)</span> 为左上角， <spanclass="math inline">\((x,y)\)</span> 为右下角的黑块的数量为 <spanclass="math inline">\(f(x,y)\)</span></p><p>对于一整个区域，我们分为四部分：</p><ol type="1"><li>左上角的 <span class="math inline">\((x/n)*(y/n)\)</span> 个 <spanclass="math inline">\(n*n\)</span> 的范围</li><li>右上角的 <span class="math inline">\((x/n)\)</span> 个 <spanclass="math inline">\(n*(y\%n)\)</span> 的范围</li><li>左下角的 <span class="math inline">\((y/n)\)</span> 个 <spanclass="math inline">\(n*(x\%n)\)</span> 的范围</li><li>右下角的 <span class="math inline">\(1\)</span> 个 <spanclass="math inline">\((x\%n)*(y\%n)\)</span> 的范围</li></ol><p>由二维前缀和以及容斥原理可知： <span class="math inline">\(ans=f(c,d)-f(c,b-1)-f(a-1,d)+f(a-1,b-1)\)</span></p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ucudl3m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-ucudl3m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><br>vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt; <span class="hljs-built_in">mp</span>(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;(N));<br>vector&lt;vector&lt;ll&gt;&gt; <span class="hljs-built_in">sum</span>(N + <span class="hljs-number">10</span>, <span class="hljs-built_in">vector</span>&lt;ll&gt;(N + <span class="hljs-number">10</span>));<br><span class="hljs-type">int</span> n, q;<br><br><span class="hljs-function">ll <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = <span class="hljs-number">0</span>;<br>    res += <span class="hljs-number">1LL</span> * (x / n) * (y / n) * sum[n][n];<br>    res += <span class="hljs-number">1LL</span> * (y / n) * sum[x % n][n];<br>    res += <span class="hljs-number">1LL</span> * (x / n) * sum[n][y % n];<br>    res += <span class="hljs-number">1LL</span> * sum[x % n][y % n];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            cin &gt;&gt; mp[i][j];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            sum[i][j] = (mp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;B&#x27;</span>) + sum[i - <span class="hljs-number">1</span>][j] + sum[i][j - <span class="hljs-number">1</span>] - sum[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b, c, d;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<br>        cout &lt;&lt; <span class="hljs-built_in">cal</span>(c + <span class="hljs-number">1</span>, d + <span class="hljs-number">1</span>) - <span class="hljs-built_in">cal</span>(c + <span class="hljs-number">1</span>, b) - <span class="hljs-built_in">cal</span>(a, d + <span class="hljs-number">1</span>) + <span class="hljs-built_in">cal</span>(a, b) &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>将 <span class="math inline">\(a,\ b\)</span>两个数组降序排序后。</p><p>易证，对于 <span class="math inline">\(a_i\ (0 \le i \le n)\)</span>和 <span class="math inline">\(b_j\ (0 \le j \le m)\)</span> ， <spanclass="math inline">\(a_i+b_j\)</span> 的前 <spanclass="math inline">\(l+1\)</span> 大满足 <spanclass="math inline">\(i*j \le \sqrt{nm}\)</span></p><p>找出范围内的所有值中没被限制的最大值即为答案</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-wl0lcbm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-wl0lcbm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> w, id;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node a, <span class="hljs-type">const</span> node b)<br>    &#123;<br>        <span class="hljs-keyword">return</span> a.w &gt; b.w;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, l;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; l;<br><br>    <span class="hljs-function">vector&lt;node&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i].w;<br>        a[i].id = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; b[i].w;<br>        b[i].id = i;<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, b.<span class="hljs-built_in">end</span>());<br><br>    set&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; no;<br>    <span class="hljs-keyword">while</span> (l--)<br>    &#123;<br>        <span class="hljs-type">int</span> c, d;<br>        cin &gt;&gt; c &gt;&gt; d;<br>        no.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(c, d));<br>    &#125;<br><br>    priority_queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m &amp;&amp; i * j &lt;= <span class="hljs-built_in">max</span>(<span class="hljs-number">1e5</span>, <span class="hljs-built_in">sqrt</span>(n * m)); j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (no.<span class="hljs-built_in">count</span>(<span class="hljs-built_in">make_pair</span>(a[i].id, b[j].id)))<br>                <span class="hljs-keyword">continue</span>;<br>            q.<span class="hljs-built_in">push</span>(a[i].w + b[j].w);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; q.<span class="hljs-built_in">top</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 SZTU-ACM迎新赛</title>
    <link href="/archives/4125702198/"/>
    <url>/archives/4125702198/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><table><thead><tr><th style="text-align: center;">难度</th><th style="text-align: center;">题号</th><th style="text-align: center;">考察点</th></tr></thead><tbody><tr><td style="text-align: center;">签到</td><td style="text-align: center;"><span class="math inline">\(I\M\)</span></td><td style="text-align: center;">基本的语言知识</td></tr><tr><td style="text-align: center;">简单</td><td style="text-align: center;"><span class="math inline">\(L\ B\ G\E\)</span></td><td style="text-align: center;">枚举、贪心等基础算法思想</td></tr><tr><td style="text-align: center;">中等</td><td style="text-align: center;"><span class="math inline">\(D\ F\ K\H\)</span></td><td style="text-align: center;">基础算法和代码实现能力</td></tr><tr><td style="text-align: center;">困难</td><td style="text-align: center;"><span class="math inline">\(J\ A\C\)</span></td><td style="text-align: center;">基础算法的进阶</td></tr></tbody></table><blockquote><p>预估：冠军 <span class="math inline">\(8\)</span> 题，金牌 <spanclass="math inline">\(5\)</span> 题，银牌 <spanclass="math inline">\(4\)</span> 题</p></blockquote><h2 id="a-要迟到了">A 要迟到了！</h2><h3 id="考点">考点：</h3><ul><li>搜索</li><li>图论</li></ul><h3 id="题解">题解：</h3><blockquote><p>困难题</p></blockquote><h4 id="解法一两遍-bfs-onm-k">解法一：两遍 <spanclass="math inline">\(BFS\)</span> <span class="math inline">\(O(n*m +k)\)</span></h4><p>从起点开始做 <span class="math inline">\(BFS\)</span>记录从起点到每个位置只走路（每步时间为 <spanclass="math inline">\(t_1\)</span> ）的时间 <spanclass="math inline">\(t_{w}\)</span></p><p>从终点开始做 <span class="math inline">\(BFS\)</span>记录从终点到每个位置用单车（每步时间为 <spanclass="math inline">\(t_2\)</span> ）的时间 <spanclass="math inline">\(t_c\)</span></p><p>维护一个最小值 <span class="math inline">\(ans\)</span></p><p>遍历所有的单车的位置 <span class="math inline">\((i,j)\)</span>，此时 <span class="math inline">\(ans = min(ans,\ t_w[i][j] +t_c[i][j])\)</span></p><p>再额外判断一次如果不找单车，直接用走路的方式从起点到终点 <spanclass="math inline">\((i,j)\)</span> ，即 <spanclass="math inline">\(ans = min(ans,\ t_w[i][j])\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-1un06hm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-1un06hm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m, t1, t2;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; S, T;<br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; C;<br><span class="hljs-type">char</span> mp[N][N];<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">t_w</span>(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(N, <span class="hljs-number">-1</span>));<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">t_c</span>(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(N, <span class="hljs-number">-1</span>));<br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">bool</span> vis[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; &amp;t, <span class="hljs-type">int</span> dt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br><br>    vis[PII.first][PII.second] = <span class="hljs-literal">true</span>;<br>    t[PII.first][PII.second] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(PII.first, PII.second));<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>().first;<br>        <span class="hljs-type">int</span> y = q.<span class="hljs-built_in">front</span>().second;<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> tx = x + dx[i];<br>            <span class="hljs-type">int</span> ty = y + dy[i];<br><br>            <span class="hljs-keyword">if</span> (tx &lt; <span class="hljs-number">1</span> || ty &lt; <span class="hljs-number">1</span> || tx &gt; n || ty &gt; m || vis[tx][ty] || mp[tx][ty] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br><br>            vis[tx][ty] = <span class="hljs-literal">true</span>;<br>            t[tx][ty] = t[x][y] + dt;<br>            q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(tx, ty));<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t1 &gt;&gt; t2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            cin &gt;&gt; mp[i][j];<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>                S = <span class="hljs-built_in">make_pair</span>(i, j);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;T&#x27;</span>)<br>                T = <span class="hljs-built_in">make_pair</span>(i, j);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;C&#x27;</span>)<br>                C.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(i, j));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">bfs</span>(S, t_w, t1);<br>    <span class="hljs-built_in">bfs</span>(T, t_c, t2);<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : C)<br>    &#123;<br>        <span class="hljs-type">int</span> cx = it.first;<br>        <span class="hljs-type">int</span> cy = it.second;<br>        ans = <span class="hljs-built_in">min</span>(ans, t_w[cx][cy] + t_c[cx][cy]);<br>    &#125;<br>    ans = <span class="hljs-built_in">min</span>(ans, t_w[T.first][T.second]);<br><br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h4 id="解法二bfs优先队列-o2nm-log-nm">解法二：BFS+优先队列 <spanclass="math inline">\(O(2nm \log (nm))\)</span></h4><p>使用优先队列让最短时间在队首，时间相同的时候优先有车的。</p><p><span class="math inline">\(BFS\)</span>直到到达终点，此时的时间即为答案。若队列结束也没有到达终点则返回 <spanclass="math inline">\(-1\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-w1rca9m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-w1rca9m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m, t1, t2;<br><span class="hljs-type">int</span> sx, sy;<br><span class="hljs-type">char</span> mp[N][N];<br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">bool</span> vis[N][N][<span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, t;<br>    <span class="hljs-type">bool</span> flag;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node a, <span class="hljs-type">const</span> node b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a.t != b.t)<br>            <span class="hljs-keyword">return</span> a.t &gt; b.t;<br>        <span class="hljs-keyword">return</span> a.flag &lt; b.flag;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;node&gt; q;<br><br>    q.<span class="hljs-built_in">push</span>(&#123;sx, sy, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>    vis[sx][sy][<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node now = q.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-type">int</span> x = now.x;<br>        <span class="hljs-type">int</span> y = now.y;<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (mp[x][y] == <span class="hljs-string">&#x27;T&#x27;</span>)<br>            <span class="hljs-keyword">return</span> now.t;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> tx = x + dx[i];<br>            <span class="hljs-type">int</span> ty = y + dy[i];<br>            <span class="hljs-type">int</span> tt = now.t + (now.flag ? t2 : t1);<br>            <span class="hljs-type">bool</span> flag = now.flag || mp[tx][ty] == <span class="hljs-string">&#x27;C&#x27;</span>;<br><br>            <span class="hljs-keyword">if</span> (tx &lt; <span class="hljs-number">1</span> || ty &lt; <span class="hljs-number">1</span> || tx &gt; n || ty &gt; m || vis[tx][ty][flag] || mp[tx][ty] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br><br>            vis[tx][ty][flag] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(&#123;tx, ty, tt, flag&#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t1 &gt;&gt; t2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            cin &gt;&gt; mp[i][j];<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>                sx = i, sy = j;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">bfs</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b-打怪兽">B 打怪兽</h2><h3 id="考点-1">考点：</h3><ul><li>遍历</li></ul><h3 id="题解-1">题解：</h3><blockquote><p>简单题</p></blockquote><p>遍历所有的怪兽，求出每个怪兽对任何一个小蔡的最短距离，输出其中的最大值即可。</p><p>复杂度： <span class="math inline">\(O(n*k)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-h9a3nqm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-h9a3nqm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(k + <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>        cin &gt;&gt; v[i];<br><br>    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">a</span>(n + <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i].first &gt;&gt; a[i].second;<br><br>    <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x = a[i].first;<br>        <span class="hljs-type">int</span> y = a[i].second;<br>        <span class="hljs-type">double</span> t = <span class="hljs-number">1e18</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= k; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> xx = a[v[j]].first;<br>            <span class="hljs-type">int</span> yy = a[v[j]].second;<br>            t = <span class="hljs-built_in">min</span>(t, <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">pow</span>(x - xx, <span class="hljs-number">2</span>) + <span class="hljs-built_in">pow</span>(y - yy, <span class="hljs-number">2</span>)));<br>        &#125;<br>        ans = <span class="hljs-built_in">max</span>(ans, t);<br>    &#125;<br><br>    cout &lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">10</span>) &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c-演唱会">C 演唱会</h2><h3 id="考点-2">考点：</h3><ul><li>动态规划</li></ul><h3 id="题解-2">题解：</h3><blockquote><p>困难题</p></blockquote><p>定义了一个结构体 <code>node</code>，其中包含了每一天的信息，包括慧慧可以完成的任务数量 <spanclass="math inline">\(l\)</span> ，完成一项任务的薪资 <spanclass="math inline">\(q\)</span> ，以及这一天是哪一天 <spanclass="math inline">\(s\)</span>。此外，我们还计算了这一天可以完成任务的时间段 <spanclass="math inline">\(ledge\)</span> 和 <spanclass="math inline">\(redge\)</span> 。</p><p>定义了一个二维数组 <code>dp</code> ，其中 <code>dp[i][j]</code>表示在第 <span class="math inline">\(i\)</span>天结束时，如果慧慧选择最后提前做到第 <spanclass="math inline">\(j\)</span> 天工作，她可以获得的最大收入。</p><p>对于每一天，我们有两种选择：要么选择工作，要么选择休息。如果选择工作，我们需要更新<code>dp[i][j]</code>的值。为了找到最优的工作日期，我们使用了一个优先队列 <code>que</code>来存储可能的工作日期。在每一天结束时，我们检查队列中的任务是否可以在当前日期完成，如果可以，我们就更新<code>dp[i][j]</code> 的值。</p><p>优先队列 <code>que</code> 的作用是帮助我们在 <spanclass="math inline">\(O(1)\)</span>的时间复杂度内找到最优的工作日期。具体来说，优先队列中存储的是一对值，第一个值是<span class="math inline">\(dp[i - 1][j] - j * day[i].q\)</span>，表示如果在第 <span class="math inline">\(j\)</span>天工作，那么慧慧可以获得的收入；第二个值是 <spanclass="math inline">\(j\)</span> ，表示这一天是哪一天。</p><p>在每一天结束时，我们检查队列中的任务是否可以在当前日期完成，如果可以，我们就更新<code>dp[i][j]</code>的值。为了实现这一点，我们在每一天开始时，都会将可能的工作日期添加到优先队列中。然后，在每一天结束时，我们检查队列的顶部元素，如果这一天的任务可以在当前日期完成，那么我们就从队列中弹出这个元素，并更新<code>dp[i][j]</code> 的值。</p><p>最后，我们遍历 <code>dp[k]</code>数组，找到最大的收入，这就是慧慧可以获得的最大收入。</p><p>复杂度： <span class="math inline">\(O(n*k)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-1bw4bgm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-1bw4bgm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">16000</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> s, l, q;<br>    <span class="hljs-type">int</span> ledge, redge;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;a, <span class="hljs-type">const</span> node &amp;b)<br>    &#123;<br>        <span class="hljs-keyword">return</span> a.s &lt; b.s;<br>    &#125;<br>&#125; day[<span class="hljs-number">105</span>];<br><br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">105</span>][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        cin &gt;&gt; day[i].l &gt;&gt; day[i].q &gt;&gt; day[i].s;<br>        day[i].ledge = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, day[i].s - day[i].l);<br>        day[i].redge = <span class="hljs-built_in">min</span>(n, day[i].s + day[i].l - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(day + <span class="hljs-number">1</span>, day + <span class="hljs-number">1</span> + k);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; day[i].s; j++)<br>            dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br><br>        priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; que;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = day[i].ledge; j &lt; day[i].s; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> cur = dp[i - <span class="hljs-number">1</span>][j] - j * day[i].q;<br>            <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>() &amp;&amp; dp[i - <span class="hljs-number">1</span>][que.<span class="hljs-built_in">top</span>().second] - que.<span class="hljs-built_in">top</span>().second * day[i].q &lt;= cur)<br>                que.<span class="hljs-built_in">pop</span>();<br>            que.<span class="hljs-built_in">push</span>(&#123;cur, j&#125;);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = day[i].s; j &lt;= day[i].redge; j++)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>() &amp;&amp; j - que.<span class="hljs-built_in">top</span>().second &gt; day[i].l)<br>                que.<span class="hljs-built_in">pop</span>();<br>            dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>            dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][que.<span class="hljs-built_in">top</span>().second] + (j - que.<span class="hljs-built_in">top</span>().second) * day[i].q);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = day[i].redge + <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        ans = <span class="hljs-built_in">max</span>(ans, dp[k][i]);<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d-总要赢一次吧">D 总要赢一次吧</h2><h3 id="考点-3">考点：</h3><ul><li><span class="math inline">\(bash\)</span> 博弈</li></ul><h3 id="题解-3">题解：</h3><blockquote><p>中等题</p></blockquote><p>由题可知，本题需要找先手必胜的条件。</p><p>对于总量为 <span class="math inline">\(v\)</span>升的酒，如果每人每次只能喝 <span class="math inline">\(1 \sim k\)</span>升的酒。想赢就需要让对方喝完后还有剩余，并且在 <spanclass="math inline">\(1 \sim k\)</span> 升之间。所以只要让酒一直是 <spanclass="math inline">\(n(k+1)\ (n \in N)\)</span> 升就一定能够赢。</p><p>证明：当酒为 <span class="math inline">\(n(k+1)\ (n \in N)\)</span>时，如果对方喝 <span class="math inline">\(a\)</span> 升，我们一定能找到<span class="math inline">\(b\)</span> 满足 <spanclass="math inline">\(a+b=k+1\)</span> ，重复此过程，直到还有 <spanclass="math inline">\(k+1\)</span>升酒。此时不论对方喝多少，我们都可以喝最后一次。</p><p>故我们只需要找到满足 <span class="math inline">\(v\%(k+1)\ne0\)</span> 的情况，此时先手必胜，找出最大的k即可。</p><p>复杂度： <span class="math inline">\(O(n*m)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-9d5n9qm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-9d5n9qm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n, cnt = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> v, m, k, ans = <span class="hljs-number">-1</span>;<br>        cin &gt;&gt; v &gt;&gt; m;<br>        <span class="hljs-keyword">while</span> (m--)<br>        &#123;<br>            cin &gt;&gt; k;<br>            <span class="hljs-keyword">if</span> (v % (k + <span class="hljs-number">1</span>))<br>                ans = <span class="hljs-built_in">max</span>(ans, k);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ans != <span class="hljs-number">-1</span>)<br>            cnt++;<br><br>        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    cout &lt;&lt; (cnt &gt; n - cnt ? <span class="hljs-string">&quot;successful&quot;</span> : <span class="hljs-string">&quot;I can&#x27;t help you&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e-臭袜子">E 臭袜子</h2><h3 id="考点-4">考点：</h3><ul><li>STL</li></ul><h3 id="题解-4">题解：</h3><blockquote><p>简单题</p></blockquote><p>使用 <code>map</code> 嵌套 <code>pair</code>进行编号的计数，答案更新的情况有两种，一种是出现的次数比现在的更多，一种是次数相同但是第一次出现的更早。</p><p>复杂度： <span class="math inline">\(O(n)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-0ytgcrm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-0ytgcrm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>map&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, <span class="hljs-type">int</span>&gt; cnt;<br>map&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, <span class="hljs-type">int</span>&gt; t;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; ans;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; now;<br>        cin &gt;&gt; now.first &gt;&gt; now.second;<br>        cnt[now]++;<br><br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-built_in">count</span>(now) == <span class="hljs-number">0</span>)<br>            t[now] = i;<br><br>        <span class="hljs-keyword">if</span> (cnt[now] &gt; cnt[ans] || cnt[now] == cnt[ans] &amp;&amp; t[now] &lt;= t[ans])<br>            ans = now;<br>    &#125;<br>    cout &lt;&lt; cnt[ans] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; ans.first &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; ans.second;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f-我要上厕所">F 我要上厕所！</h2><h3 id="考点-5">考点：</h3><ul><li>模拟</li><li>STL</li><li>分治</li></ul><h3 id="题解-5">题解：</h3><blockquote><p>中等题</p></blockquote><h4 id="解法一分治-onlog-n">解法一：分治 <spanclass="math inline">\(O(n\log n)\)</span></h4><p>分：将数组分成两半，直到只有一个元素</p><p>治：当只有一个元素的时候这个部分的最大就是它本身</p><p>合：将两个数组和在一起的时候是哪种情况：</p><ol type="1"><li>最大子数组是其左侧数组的最大子数组</li><li>最大子数组是其右侧数组的最大子数组</li><li>最大子数组出现在中间位置：从中间向两侧分别加起来，找到分别的最大值然后求和</li></ol><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-o4qm1qm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-o4qm1qm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findmid</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;a, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> left_max = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> left_sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = mid; i &gt;= l; i--)<br>    &#123;<br>        left_sum += a[i];<br>        left_max = <span class="hljs-built_in">max</span>(left_max, left_sum);<br>    &#125;<br><br>    <span class="hljs-type">int</span> right_max = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right_sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = mid + <span class="hljs-number">1</span>; i &lt;= r; i++)<br>    &#123;<br>        right_sum += a[i];<br>        right_max = <span class="hljs-built_in">max</span>(right_max, right_sum);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> left_max + right_max;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;a, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r)<br>        <span class="hljs-keyword">return</span> a[l];<br><br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br><br>    <span class="hljs-type">int</span> left_max = <span class="hljs-built_in">find</span>(a, l, mid);<br>    <span class="hljs-type">int</span> right_max = <span class="hljs-built_in">find</span>(a, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> mid_max = <span class="hljs-built_in">findmid</span>(a, l, mid, r);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(&#123;mid_max, left_max, right_max&#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    map&lt;string, <span class="hljs-type">bool</span>&gt; out;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(N)</span>, <span class="hljs-title">b</span><span class="hljs-params">(N)</span></span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> k, f, t;<br>        string s;<br>        cin &gt;&gt; k &gt;&gt; f &gt;&gt; s &gt;&gt; t;<br><br>        <span class="hljs-keyword">if</span> ((k == <span class="hljs-number">1</span> &amp;&amp; s[<span class="hljs-number">0</span>] &gt; <span class="hljs-string">&#x27;m&#x27;</span>) || (k == <span class="hljs-number">2</span> &amp;&amp; s[<span class="hljs-number">0</span>] &lt; <span class="hljs-string">&#x27;n&#x27;</span>))<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (f == <span class="hljs-number">2</span>)<br>        &#123;<br>            out[s] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>                a[t]--;<br>            <span class="hljs-keyword">else</span><br>                b[t]--;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (out[s])<br>                <span class="hljs-keyword">continue</span>;<br>            out[s] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>                a[t]++;<br>            <span class="hljs-keyword">else</span><br>                b[t]++;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">find</span>(a, <span class="hljs-number">0</span>, <span class="hljs-number">50000</span>) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">find</span>(b, <span class="hljs-number">0</span>, <span class="hljs-number">50000</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h4 id="解法二dp-on">解法二：dp <spanclass="math inline">\(O(n)\)</span></h4><p>这里对 <span class="math inline">\(dp\)</span> 数组的定义为 以为第<span class="math inline">\(i\)</span> 秒为结尾的最大子数组和为<code>dp[i]</code> 。</p><p>状态转移方程为 <span class="math inline">\(dp[i] = max(nums[i],\ dp[i- 1] + nums[i])\)</span> ，即如果加上第 <spanclass="math inline">\(i\)</span>秒更优就加，否则重新开始一段子数组。</p><p>注意到 <code>dp[i]</code> 仅仅和 <code>dp[i-1]</code>的状态有关，所以可以直接在原数组操作。</p><p>有 <span class="math inline">\(nums[i] = max(nums[i],\ nums[i - 1] +nums[i])\)</span></p><p>输出其中的最大值即可</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-iuicfim2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-iuicfim2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">50000</span>; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">max</span>(a[i - <span class="hljs-number">1</span>] + a[i], a[i]);<br>        res = <span class="hljs-built_in">max</span>(res, a[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    map&lt;string, <span class="hljs-type">bool</span>&gt; out;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(N)</span>, <span class="hljs-title">b</span><span class="hljs-params">(N)</span></span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> k, f, t;<br>        string s;<br>        cin &gt;&gt; k &gt;&gt; f &gt;&gt; s &gt;&gt; t;<br><br>        <span class="hljs-keyword">if</span> ((k == <span class="hljs-number">1</span> &amp;&amp; s[<span class="hljs-number">0</span>] &gt; <span class="hljs-string">&#x27;m&#x27;</span>) || (k == <span class="hljs-number">2</span> &amp;&amp; s[<span class="hljs-number">0</span>] &lt; <span class="hljs-string">&#x27;n&#x27;</span>))<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (f == <span class="hljs-number">2</span>)<br>        &#123;<br>            out[s] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>                a[t]--;<br>            <span class="hljs-keyword">else</span><br>                b[t]--;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (out[s])<br>                <span class="hljs-keyword">continue</span>;<br>            out[s] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>                a[t]++;<br>            <span class="hljs-keyword">else</span><br>                b[t]++;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">dp</span>(a) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">dp</span>(b);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="g-faker的阿卡丽">G Faker的阿卡丽</h2><h3 id="考点-6">考点：</h3><ul><li>贪心</li></ul><h3 id="题解-6">题解：</h3><blockquote><p>简单题</p></blockquote><p>我们可以一开始就使用 <span class="math inline">\(w\)</span> ，增加<span class="math inline">\(b\)</span> 点能量和 <spanclass="math inline">\(1\)</span> 点帅气值</p><p>然后我们将使用技能和普通攻击算作一个整体，即每次消耗 <spanclass="math inline">\(min(a,c)-d\)</span> 点能量，增加 <spanclass="math inline">\(2\)</span> 点帅气值</p><p>但是这样我们需要先把最后一次处理，因为此时的能量并不够我们先用再加，直接记为增加<span class="math inline">\(2\)</span> 点帅气值即可。</p><p>复杂度： <span class="math inline">\(O(1)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-x4ih32m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-x4ih32m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n, a, b, c, d;<br>    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<br><br>    n += b;<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">min</span>(a, c);<br>    n -= t;<br><br>    cout &lt;&lt; <span class="hljs-number">1</span> + n / (t - d) * <span class="hljs-number">2LL</span> + <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="h-挑区间">H 挑区间</h2><h3 id="考点-7">考点：</h3><ul><li>前缀和</li></ul><h3 id="题解-7">题解：</h3><blockquote><p>中等题</p></blockquote><p>对于一段区间 <span class="math inline">\([l,r]\)</span> <spanclass="math inline">\((1 \le l \le r \le n)\)</span>我们可以预处理出前缀和数组 <code>pre</code> 和后缀和数组<code>suf</code> ，<code>pre[i]</code> 表示这 <spanclass="math inline">\([1,i]\)</span> 之间的累加和， <code>suf[i]</code>表示 <span class="math inline">\([i,n]\)</span> 之间的累加和。</p><p>我们可以把序列分为三段 <spanclass="math inline">\([1,l-1],[l,r],[r+1,n]\)</span> 。其中 <spanclass="math inline">\([1,l-1]\)</span> 和 <spanclass="math inline">\([r+1,1]\)</span> 我们通过前后缀和查询复杂度为<span class="math inline">\(O(1)\)</span></p><p>对于 <span class="math inline">\([l,r]\)</span> 我们枚举每一个左端点<span class="math inline">\(l\)</span> ，遍历所有的可能区间 <spanclass="math inline">\([l,r]\)</span> ，复杂度为 <spanclass="math inline">\(O(n^2)\)</span>。需要注意的是边界的情况需要特判。</p><p>复杂度： <span class="math inline">\(O(n^2)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ymc1bnm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-ymc1bnm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n, d;<br>    cin &gt;&gt; n &gt;&gt; d;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">pre</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span>, <span class="hljs-title">suf</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        pre[i] = pre[i - <span class="hljs-number">1</span>] + <span class="hljs-built_in">abs</span>(a[i] - a[i - <span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>        suf[i] = suf[i + <span class="hljs-number">1</span>] + <span class="hljs-built_in">abs</span>(a[i] - a[i + <span class="hljs-number">1</span>]);<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l &lt;= n; l++)<br>    &#123;<br>        b = a;<br>        ll tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = l; r &lt;= <span class="hljs-built_in">min</span>(l + d - <span class="hljs-number">1</span>, n); r++)<br>        &#123;<br>            b[r] = r;<br>            <span class="hljs-keyword">if</span> (r != <span class="hljs-number">1</span>)<br>                tmp += <span class="hljs-built_in">abs</span>(b[r] - b[r - <span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span> (r != n)<br>                tmp += <span class="hljs-built_in">abs</span>(b[r] - b[r + <span class="hljs-number">1</span>]);<br>            ans = <span class="hljs-built_in">max</span>(ans, pre[l - <span class="hljs-number">1</span>] + suf[r + <span class="hljs-number">1</span>] + tmp);<br>            <span class="hljs-keyword">if</span> (r != n)<br>                tmp -= <span class="hljs-built_in">abs</span>(b[r] - b[r + <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="i-四季">I 四季</h2><h3 id="考点-8">考点：</h3><ul><li>基础语法</li></ul><h3 id="题解-8">题解：</h3><blockquote><p>签到题</p></blockquote><p>顺带考察常识：</p><ul><li><span class="math inline">\(3,4,5\)</span> 是春天</li><li><span class="math inline">\(6,7,8\)</span> 是夏天</li><li><span class="math inline">\(9,10,11\)</span> 是秋天</li><li><span class="math inline">\(12,1,2\)</span> 是冬天</li></ul><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-9g37sim2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-9g37sim2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;winter&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">5</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;spring&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">8</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;summer&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">11</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;autumn&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;winter&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="j-飞升">J 飞升</h2><h3 id="考点-9">考点：</h3><ul><li>二分</li></ul><h3 id="题解-9">题解：</h3><blockquote><p>困难题</p></blockquote><p>对每个人的能力值进行二分，找到满足条件的最大值</p><p>二分边界为 <span class="math inline">\([a[i],a[i]+k]\)</span>，即一次都不用和 <span class="math inline">\(k\)</span>次都用在他身上</p><p>对于 <code>check()</code>函数，从当前这位开始，向右边累加构造出阶梯型需要多少次操作。判断需要的次数<span class="math inline">\(cnt\)</span> 是否满足 <spanclass="math inline">\(cnt\le k\)</span> 即可</p><p>复杂度： <span class="math inline">\(O(n log n)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-eped7lm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-eped7lm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(N)</span></span>;<br><span class="hljs-type">int</span> n, k;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; i + p &lt;= n; p++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i + p] &gt;= (x - p))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cnt &gt; k)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        cnt += (x - p) - a[i + p];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> l = a[i], r = a[i] + k, tmp;<br>        <span class="hljs-keyword">while</span> (l &lt;= r)<br>        &#123;<br>            <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid, i))<br>                tmp = mid, l = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        ans = <span class="hljs-built_in">max</span>(ans, tmp);<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="k-fx-floorlog₂x">K f(x) = floor(log₂(x))</h2><h3 id="考点-10">考点：</h3><ul><li>数学</li></ul><h3 id="题解-10">题解：</h3><blockquote><p>中等题</p></blockquote><p>先预处理 <span class="math inline">\(10^{18}\)</span> 内所有 <spanclass="math inline">\(2\)</span> 的指数幂</p><p>然后一段一段的累加得到 <span class="math inline">\(1 \sim l\)</span>的和，同理得到 <span class="math inline">\(1 \sim r\)</span> 的和</p><p>做差即可得到结果</p><p>复杂度： <span class="math inline">\(O(q \log r)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-iy8edim2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-iy8edim2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll v[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">63</span>; i++)<br>        v[i] = v[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span>;<br><br>    <span class="hljs-type">int</span> q;<br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        ll l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br><br>        ll a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, p;<br><br>        p = <span class="hljs-built_in">upper_bound</span>(v, v + <span class="hljs-number">63</span>, l) - v - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; p; i++)<br>        &#123;<br>            a += ((v[i] % mod) * i) % mod;<br>            a %= mod;<br>        &#125;<br>        a += p * (l - v[p]) % mod;<br>        a %= mod;<br><br>        p = <span class="hljs-built_in">upper_bound</span>(v, v + <span class="hljs-number">63</span>, r) - v - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; p; i++)<br>        &#123;<br>            b += ((v[i] % mod) * i) % mod;<br>            b %= mod;<br>        &#125;<br>        b += p * ((r - v[p] + <span class="hljs-number">1</span>) % mod);<br>        b %= mod;<br><br>        cout &lt;&lt; (b - a + mod) % mod &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="l-哪个倒霉蛋还得再体测一次">L 哪个倒霉蛋还得再体测一次</h2><h3 id="考点-11">考点：</h3><ul><li>递推</li></ul><h3 id="题解-11">题解：</h3><blockquote><p>简单题</p></blockquote><h4 id="解法一递推">解法一：递推</h4><p>易知： <span class="math inline">\(a[n]=\sum_{i=1}^{n/2}a[i]+1\)</span></p><p>复杂度： <span class="math inline">\(O(n^2)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-4o9ubym2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-4o9ubym2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">1010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i / <span class="hljs-number">2</span>; j++)<br>            a[i] += a[j];<br>        a[i]++;<br>    &#125;<br>    cout &lt;&lt; a[n];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h4 id="解法二递归记忆化">解法二：递归+记忆化</h4><p>将递归的结果先存起来，下次遇到就不用再递归下去</p><p>复杂度： <span class="math inline">\(O(n \log n)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-3s1ot7m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-3s1ot7m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">1010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (a[n])<br>        <span class="hljs-keyword">return</span> a[n];<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / <span class="hljs-number">2</span>; ++i)<br>        sum += <span class="hljs-built_in">func</span>(i);<br>    <span class="hljs-keyword">return</span> a[n] = sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; <span class="hljs-built_in">func</span>(n);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h4 id="解法三打表">解法三：打表</h4><p>以下是打表的代码</p><p>做表大概十分钟，打完表复杂度为 <spanclass="math inline">\(O(1)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-gc3qidm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-gc3qidm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / <span class="hljs-number">2</span>; i++)<br>        sum += <span class="hljs-built_in">func</span>(i);<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;int a[1010]=&#123;0&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++)<br>        cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; <span class="hljs-built_in">func</span>(i);<br>    cout &lt;&lt; <span class="hljs-string">&quot;&#125;;&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="m-差分是你的谎言o.o">M 差分是你的谎言O.o</h2><h3 id="考点-12">考点：</h3><ul><li>基础语法</li></ul><h3 id="题解-12">题解：</h3><blockquote><p>签到题</p></blockquote><p>按照题意，用 <code>for</code> 构造出 <spanclass="math inline">\(b\)</span> 数组即可</p><p>复杂度： <span class="math inline">\(O(n)\)</span></p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-cdavcsm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-cdavcsm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span>, <span class="hljs-title">b</span><span class="hljs-params">(n - <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>        b[i] = <span class="hljs-built_in">abs</span>(a[i + <span class="hljs-number">1</span>] - a[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i)<br>            cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        cout &lt;&lt; b[i];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>SZTU_ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>SZTU_ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 330</title>
    <link href="/archives/1886849196/"/>
    <url>/archives/1886849196/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://atcoder.jp/contests/abc330">AtCoder BeginnerContest 330</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>满足 <span class="math inline">\(x \ge l\)</span> 的 <spanclass="math inline">\(x\)</span> 的个数即可</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-206lfnm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-206lfnm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n, l;<br>    cin &gt;&gt; n &gt;&gt; l;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (x &gt;= l)<br>            ans++;<br>    &#125;<br><br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>如果满足 <span class="math inline">\(L \le A_i \le R\)</span> 输出<span class="math inline">\(A_i\)</span></p><p>如果满足 <span class="math inline">\(A_i \lt L\)</span> 输出 <spanclass="math inline">\(L\)</span></p><p>如果满足 <span class="math inline">\(A_i \gt R\)</span> 输出 <spanclass="math inline">\(R\)</span></p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-19vvbtm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-19vvbtm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n, l, r;<br>    cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (x &lt; l)<br>            cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; r)<br>            cout &lt;&lt; r &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>令 <span class="math inline">\(x\)</span> 从 <spanclass="math inline">\(0\)</span> 遍历到 <spanclass="math inline">\(\lceil \sqrt{D}\rceil\)</span> ，如果 <spanclass="math inline">\(x\)</span> 大于 <span class="math inline">\(\lceil\sqrt{D}\rceil\)</span> ，那么设置 <spanclass="math inline">\(y=0\)</span> 是最优的，但这里的 <spanclass="math inline">\(|x^2+y^2-D|\)</span> 明显大于 <spanclass="math inline">\(x=\lceil \sqrt{D}\rceil\)</span> 和 <spanclass="math inline">\(y=0\)</span> 时。</p><p>对一个 <span class="math inline">\(x\)</span> 最佳的 <spanclass="math inline">\(y\)</span> 为 <spanclass="math inline">\(y=\lfloor \sqrt{-C}\rfloor\)</span> 或 <spanclass="math inline">\(y=\lceil\sqrt{-C}\rceil\)</span>，可以直接算出这时候的值，更新 <span class="math inline">\(ans\)</span>。</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-evulcpm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-evulcpm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    ll d;<br>    cin &gt;&gt; d;<br><br>    ll ans = <span class="hljs-number">0x7fffffff</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i * i &lt;= d; i++)<br>    &#123;<br>        ll x = <span class="hljs-number">1LL</span> * i * i;<br>        <span class="hljs-keyword">if</span> (x &gt; d)<br>            <span class="hljs-keyword">break</span>;<br>        ll y1 = <span class="hljs-built_in">sqrt</span>(d - x);<br>        ll y2 = y1 + <span class="hljs-number">1</span>;<br><br>        ans = <span class="hljs-built_in">min</span>(&#123;ans, <span class="hljs-built_in">abs</span>((x + y1 * y1) - d), <span class="hljs-built_in">abs</span>((x + y2 * y2) - d)&#125;);<br>    &#125;<br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>记录每一行每一列有多少 <span class="math inline">\(o\)</span>，最后遍历每个 <span class="math inline">\(o\)</span>看这行这列还有多少其余的 <span class="math inline">\(o\)</span>，算出方案数累加即可。</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-hqav1qm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-hqav1qm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">char</span> mp[N][N];<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        &#123;<br>            cin &gt;&gt; mp[i][j];<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;o&#x27;</span>)<br>                a[i]++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;o&#x27;</span>)<br>                b[j]++;<br>        &#125;<br>    &#125;<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;o&#x27;</span>)<br>                ans += <span class="hljs-number">1LL</span> * (a[i] - <span class="hljs-number">1</span>) * (b[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>使用 <code>set</code> 的自动排序和去重来计算 <spanclass="math inline">\(mex\)</span> ，即存储有哪些数不在序列中。</p><p>由于序列长度仅为 <span class="math inline">\(n\)</span> 故超过 <spanclass="math inline">\(n\)</span> 的数我们不对 <code>set</code>进行操作。</p><p>使用一个数组存储当前的序列每个数有多少个，当出现 <spanclass="math inline">\(0\rightarrow 1\)</span> 和 <spanclass="math inline">\(1 \rightarrow 0\)</span> 的变化时，更新<code>set</code> 。</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-i3i48lm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-i3i48lm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n, q;<br>    cin &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span>, <span class="hljs-title">cnt</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span></span>;<br>    set&lt;<span class="hljs-type">int</span>&gt; st;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">if</span> (a[i] &lt;= n)<br>            cnt[a[i]]++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!cnt[i])<br>            st.<span class="hljs-built_in">insert</span>(i);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> i, x;<br>        cin &gt;&gt; i &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (a[i] &lt;= n)<br>        &#123;<br>            cnt[a[i]]--;<br>            <span class="hljs-keyword">if</span> (cnt[a[i]] == <span class="hljs-number">0</span>)<br>                st.<span class="hljs-built_in">insert</span>(a[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &lt;= n)<br>        &#123;<br>            cnt[x]++;<br>            <span class="hljs-keyword">if</span> (cnt[x] == <span class="hljs-number">1</span>)<br>                st.<span class="hljs-built_in">erase</span>(x);<br>        &#125;<br>        a[i] = x;<br>        cout &lt;&lt; *st.<span class="hljs-built_in">begin</span>() &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SZTU Monthly 2023 Nov.</title>
    <link href="/archives/1599660916/"/>
    <url>/archives/1599660916/</url>
    
    <content type="html"><![CDATA[<blockquote><p><ahref="http://acm.sztu.edu.cn/csgoj/contest/problemset?cid=1048">比赛链接</a></p></blockquote><h2 id="写在前面">写在前面</h2><h3 id="题目难度">题目难度：</h3><p>这次比赛难度划分是两道简单题，两道中等题，两道困难题。 <spanclass="math inline">\(DA\)</span> 简单题 ， <spanclass="math inline">\(BF\)</span> 中等题， <spanclass="math inline">\(CE\)</span> 困难题。</p><p>题目难度都不大，需要注意的细节较多</p><h2 id="a-魔法少女英梨梨">A 魔法少女英梨梨</h2><h3 id="考点">考点：</h3><ul><li>思维</li><li>博弈论</li></ul><h3 id="题解">题解：</h3><p>每人进行一次操作之后都会改变牌桌上的 <spanclass="math inline">\(1\)</span> 的个数的奇偶性。</p><p>平局的情况：</p><ul><li>能添加的 <span class="math inline">\(1\)</span> 小于 <spanclass="math inline">\(k\)</span> 且初始牌桌上不是刚好差一张</li><li>全场的 <span class="math inline">\(1\)</span> 都凑不出 <spanclass="math inline">\(k\)</span></li></ul><p>先手赢：</p><ul><li>初始牌桌上的 <span class="math inline">\(1\)</span> 的个数和 <spanclass="math inline">\(k\)</span> 的奇偶性不同，即操作后奇偶性相同</li><li>初始牌桌刚好差一张，可以从牌堆中加牌</li><li>初始牌桌已经满足胜利条件</li></ul><p>其余情况就是后手赢</p><h3 id="ac-code">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-tjwitcm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-tjwitcm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n, k, c;<br>    cin &gt;&gt; n &gt;&gt; k &gt;&gt; c;<br>    string s;<br>    cin &gt;&gt; s;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>            cnt++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (c &lt; k &amp;&amp; k &gt; cnt + <span class="hljs-number">1</span> || cnt + c &lt; k)<br>        cout &lt;&lt; <span class="hljs-string">&quot;GG!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((cnt + k) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> || (k == cnt + <span class="hljs-number">1</span> &amp;&amp; c &gt; <span class="hljs-number">0</span>) || cnt &gt;= k)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Eriri win!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Megumi kato win!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b-堕落星球">B 堕落星球</h2><h3 id="考点-1">考点：</h3><ul><li>思维</li><li>排序</li></ul><h3 id="题解-1">题解：</h3><p>考虑距离的最小值即为横坐标相减的最小值与纵坐标相减的和的最小值</p><p>我们将序列进行排序，每个点与相邻的两个点之间的差值一定小于其他点，故我们选前<span class="math inline">\(n\)</span> 个为横坐标，后 <spanclass="math inline">\(n\)</span> 个为纵坐标即可。</p><p>数据量很小，也可以选择用 <span class="math inline">\(O(n^2)\)</span>的排序，如冒泡排序。</p><p>这里的排序升序和降序不影响结果。</p><h3 id="ac-code-1">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ku08okm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-ku08okm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">2</span> * n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(a));<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        ans += a[i] - a[i - <span class="hljs-number">1</span>];<br>        ans += a[i + n] - a[i + n - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c-我想吃烤鸭">C 我想吃烤鸭</h2><h3 id="考点-2">考点：</h3><ul><li>二分</li></ul><h3 id="题解-2">题解：</h3><p>考虑二分答案，对毒素的持续时间进行二分。</p><p>需要注意的是，鸭鸭恶霸的生命值可能高达 <spanclass="math inline">\(10^{18}\)</span> ，故 <code>check</code>函数不能一点一点的去数伤害，需要直接通过受伤的时间点之间的间隔来判断这次受伤毒素持续了多久。</p><h3 id="ac-code-2">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-5xp3uom2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-5xp3uom2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e2</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">a</span><span class="hljs-params">(N)</span></span>;<br>ll n, h;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll k)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll sum = k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i + <span class="hljs-number">1</span>] - a[i] &gt; k)<br>            sum += k;<br>        <span class="hljs-keyword">else</span><br>            sum += a[i + <span class="hljs-number">1</span>] - a[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum &gt;= h;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; h;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    ll l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1e18</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        ll mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>            ans = mid, r = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d-灭霸要打响指啦">D 灭霸要打响指啦！</h2><h3 id="考点-3">考点：</h3><ul><li>简单语法</li></ul><h3 id="题解-3">题解：</h3><p>直接判断奇偶性输出即可</p><h3 id="ac-code-3">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-p7hfi7m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-p7hfi7m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;NO&quot;</span> : <span class="hljs-string">&quot;YES&quot;</span>) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e-国足巨星">E 国足巨星！</h2><h3 id="考点-4">考点：</h3><ul><li>组合数学</li><li>贪心</li></ul><h3 id="题解-4">题解：</h3><p>计算出每项能力还差多少能力值，然后进行排序，用最少的技能点得到最多的能力。</p><p>对于一项能力，计算出 <span class="math inline">\(A_n^m\)</span>即为一项能力的方案数，其中 <span class="math inline">\(n\)</span>为这项能力还有多少人没有， <span class="math inline">\(m\)</span>为这项能力还差几点。</p><p>将每项能力的方案数累乘就是总的方案数，记得取模 <spanclass="math inline">\(998244353\)</span></p><h3 id="ac-code-4">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-bkgc3mm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-bkgc3mm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> a[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m; i &gt;= <span class="hljs-number">1</span>; i--, n--)<br>    &#123;<br>        res *= n;<br>        res %= mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n, m, k, q;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>            cin &gt;&gt; a[i][j];<br><br>    ll ans1 = <span class="hljs-number">0</span>, ans2 = <span class="hljs-number">1</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>    &#123;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i][j])<br>                cnt++;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (cnt &gt;= k)<br>        &#123;<br>            ans1++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        v.<span class="hljs-built_in">push_back</span>(k - cnt);<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(v));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (q &lt; v[i])<br>            <span class="hljs-keyword">break</span>;<br><br>        ans2 *= <span class="hljs-built_in">cal</span>(v[i], n - k + v[i]);<br>        ans2 %= mod;<br>        ans1++;<br>        q -= v[i];<br>    &#125;<br><br>    cout &lt;&lt; ans1 &lt;&lt; endl<br>         &lt;&lt; ans2;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f-大学计算机">F 大学计算机</h2><h3 id="考点-5">考点：</h3><ul><li>数学</li></ul><h3 id="题解-5">题解：</h3><p>由题可知，这是计算一个等差数列的前 <spanclass="math inline">\(n\)</span> 项和。</p><p>需要注意的有：</p><ul><li><p><span class="math inline">\(b\)</span>并不是等差数列其中一项</p></li><li><p>会有出现死循环的情况</p></li></ul><h3 id="ac-code-5">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-p3rrqem2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-p3rrqem2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans, a, b, c;<br>    cin &gt;&gt; ans &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br><br>    ll cnt = (b - a) / c;<br>    <span class="hljs-keyword">if</span> (cnt * c + a == b)<br>        cnt--;<br><br>    <span class="hljs-keyword">if</span> (b &lt; a &amp;&amp; c &gt; <span class="hljs-number">0</span> || b &gt; a &amp;&amp; c &lt; <span class="hljs-number">0</span>)<br>        cnt = <span class="hljs-number">-1</span>;<br><br>    ans += (cnt + <span class="hljs-number">1</span>) * a + cnt * (cnt + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> * c;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>SZTU_ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>SZTU_ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Educational Codeforces Round 158 (Rated for Div. 2)</title>
    <link href="/archives/324571094/"/>
    <url>/archives/324571094/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://codeforces.com/contest/1901">Educational CodeforcesRound 158 (Rated for Div. 2)</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>找到每个加油站之间的距离的最大值，需要特殊处理最后一个加油站和 <spanclass="math inline">\(x\)</span> 之间的来回距离</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-9u8ollm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-9u8ollm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, x;<br>    cin &gt;&gt; n &gt;&gt; x;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-type">int</span> ans = (x - a[n]) * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        ans = <span class="hljs-built_in">max</span>(ans, a[i] - a[i - <span class="hljs-number">1</span>]);<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>贪心经典题型，如果当前比前一个高，则累加高出的高度。如果当前比前面矮，则必然会被前面的操作所覆盖</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-2m52tam2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-2m52tam2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">c</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; c[i];<br><br>    ll now = <span class="hljs-number">1</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (c[i] &gt; now)<br>            ans += c[i] - now;<br>        now = c[i];<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>由变化的关系式可知，如果 <span class="math inline">\(a_i \lea_j\)</span> ，不论操作多少次，都不会使 <span class="math inline">\(a_i\gt a_j\)</span>。故我们只需要判断数组中的最大值和最小值最后是否相等</p><p>每次的操作可以视作将加上一个数后右移一位</p><p>对于 <span class="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span> <span class="math inline">\((a \leb)\)</span> ，本题变为判断如何让 <span class="math inline">\((b + x) / 2- (a + x) / 2\)</span> 差值更小</p><p>会发现如果 <span class="math inline">\(a\)</span> 为奇数且 <spanclass="math inline">\(b\)</span> 为偶数时， <spanclass="math inline">\(x = 1\)</span> 会让差值更小</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-aq2qcxm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-aq2qcxm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-type">int</span> x = *<span class="hljs-built_in">min_element</span>(<span class="hljs-built_in">all</span>(a)), y = *<span class="hljs-built_in">max_element</span>(<span class="hljs-built_in">all</span>(a));<br>    vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>    <span class="hljs-keyword">while</span> (x &lt; y)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (y - x == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (x % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>                ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>        &#123;<br>            x = (x + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            y = (y + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            x = x / <span class="hljs-number">2</span>;<br>            y = y / <span class="hljs-number">2</span>;<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">size</span>() &lt;= n &amp;&amp; ans.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i)<br>                cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            cout &lt;&lt; ans[i];<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p><code>pre[i]</code> ：消灭第 <span class="math inline">\(i-1\)</span>个怪物在最坏情况下所需的法术力量</p><p><code>suf[i]</code> ：消灭第 <span class="math inline">\(i+1\)</span>个怪物在最坏情况下所需的法术力量</p><p>然后，我们遍历所有的怪物，对于每个怪物 <spanclass="math inline">\(i\)</span> ，我们计算一个值，这个值是<code>a[i]</code> ， <code>pre[i]</code> 和 <code>suf[i]</code>中的最大值（即杀死这个怪物及其相邻的两个怪物所需的初始法术力量）。最后找到这个值的最小值，这个最小值就是需要的最小初始法术力量。</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-56bkuhm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-56bkuhm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span>, <span class="hljs-title">pre</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span>, <span class="hljs-title">suf</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        pre[i] = <span class="hljs-built_in">max</span>(pre[i - <span class="hljs-number">1</span>], a[i - <span class="hljs-number">1</span>] + n - (i - <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>        suf[i] = <span class="hljs-built_in">max</span>(suf[i + <span class="hljs-number">1</span>], a[i + <span class="hljs-number">1</span>] + i);<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0x7fffffff</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">max</span>(&#123;a[i], pre[i], suf[i]&#125;));<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 329</title>
    <link href="/archives/280002889/"/>
    <url>/archives/280002889/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://atcoder.jp/contests/abc329">AtCoder BeginnerContest 329</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>循环输出，用空格分隔字符串 <span class="math inline">\(S\)</span>中的每个字符。</p><h3 id="code">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-19z8z1m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-19z8z1m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i)<br>            cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        cout &lt;&lt; s[i];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>倒序排序后，遍历全部整数，输出第一个小于最大值的数。</p><h3 id="code-1">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-45enbgm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-45enbgm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; v[i];<br><br>    <span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(v), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v[i] != v[<span class="hljs-number">0</span>])<br>        &#123;<br>            cout &lt;&lt; v[i];<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>记录每个字母连续出现的最大长度，最后累加即可。</p><h3 id="code-2">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ehhdk1m2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-ehhdk1m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    string s;<br>    cin &gt;&gt; n &gt;&gt; s;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> now = s[<span class="hljs-number">0</span>];<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">30</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == now)<br>            cnt++;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            v[now - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-built_in">max</span>(v[now - <span class="hljs-string">&#x27;a&#x27;</span>], cnt);<br>            now = s[i];<br>            cnt = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    v[now - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-built_in">max</span>(v[now - <span class="hljs-string">&#x27;a&#x27;</span>], cnt);<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>        <span class="hljs-keyword">if</span> (v[i])<br>            ans += v[i];<br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>每次投票后更新最多票数候选人编号和他的票数。</p><p>若一次投票后，被投票的候选人的票数没有超过当前的获胜者，则无需操作，反之则更新。</p><h3 id="code-3">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-bqko4dm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-bqko4dm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br><br>    <span class="hljs-type">int</span> maxn = <span class="hljs-number">0</span>, max_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br><br>        v[x]++;<br>        <span class="hljs-keyword">if</span> (v[x] &gt; maxn || (v[x] == maxn &amp;&amp; x &lt; max_index))<br>        &#123;<br>            maxn = v[x];<br>            max_index = x;<br>        &#125;<br>        cout &lt;&lt; max_index &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>DFS模拟覆盖的过程，找到 <span class="math inline">\(S\)</span>中完整的字符串 <span class="math inline">\(T\)</span> ，将其用 <spanclass="math inline">\(\%\)</span>覆盖，说明此处可以是任意的字符，然后向左向右搜索是否还能凑出字符串 <spanclass="math inline">\(T\)</span> 。操作完成后字符串 <spanclass="math inline">\(S\)</span> 应该会被还原成全是 <spanclass="math inline">\(\%\)</span> 的字符串，如果不是则说明无法匹配。</p><h3 id="code-4">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-mlbfrkm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-mlbfrkm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br>string s, t;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt; r; i++)<br>        s[i] = <span class="hljs-string">&#x27;%&#x27;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt; m; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (l - k &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (s[l - k + i] == <span class="hljs-string">&#x27;%&#x27;</span>)<br>                cnt++;<br>            <span class="hljs-keyword">if</span> (s[l - k + i] != t[i] &amp;&amp; s[l - k + i] != <span class="hljs-string">&#x27;%&#x27;</span> || cnt == m)<br>            &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (flag)<br>            <span class="hljs-built_in">dfs</span>(l - k, l - k + m);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt; m; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (r + k &gt; n)<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (s[l + k + i] == <span class="hljs-string">&#x27;%&#x27;</span>)<br>                cnt++;<br>            <span class="hljs-keyword">if</span> ((s[l + k + i] != t[i] &amp;&amp; s[l + k + i] != <span class="hljs-string">&#x27;%&#x27;</span>) || cnt == m)<br>            &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">true</span>)<br>            <span class="hljs-built_in">dfs</span>(l + k, l + k + m);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br><br>    <span class="hljs-keyword">while</span> (s.<span class="hljs-built_in">find</span>(t) != string::npos)<br>    &#123;<br>        <span class="hljs-type">int</span> p = s.<span class="hljs-built_in">find</span>(t);<br>        <span class="hljs-built_in">dfs</span>(p, p + m);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] != <span class="hljs-string">&#x27;%&#x27;</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f">F</h2><h3 id="思路-5">思路</h3><p>通过 <code>std::set</code> 进行去重。</p><p>当我们要合并两个箱子时,我们要选择把球数少的箱子倒进球数多的箱子。</p><p>但是题目已经限定倒入的方向为 <span class="math inline">\(a\)</span>倒入 <span class="math inline">\(b\)</span> 中，我们可以通过一个<code>swap()</code> 来交换两个箱子，通过 <code>set[i]</code> 表示 <spanclass="math inline">\(i\)</span> 号箱子的具体情况</p><h3 id="code-5">Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-t55qflm2bpjx5i"></i><span>cpp</span><div class="collapse show" id="collapse-t55qflm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    vector&lt;set&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">st</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        st[i].<span class="hljs-built_in">insert</span>(x);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br><br>        <span class="hljs-keyword">if</span> (st[a].<span class="hljs-built_in">size</span>() &gt; st[b].<span class="hljs-built_in">size</span>())<br>            <span class="hljs-built_in">swap</span>(st[a], st[b]);<br><br>        st[b].<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">all</span>(st[a]));<br>        st[a].<span class="hljs-built_in">clear</span>();<br><br>        cout &lt;&lt; st[b].<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 909 (Div. 3)</title>
    <link href="/archives/2728152226/"/>
    <url>/archives/2728152226/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://codeforces.com/contest/1899">Codeforces Round 909(Div. 3)</a></li></ul><h2 id="a">A</h2><h3 id="思路">思路</h3><p>因双方的行动可以相互抵消，故当 <span class="math inline">\(n\)</span>不为 <span class="math inline">\(3\)</span> 的倍数时，先手必胜</p><h3 id="code">Code</h3><figure class="highlight c++"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-fxpeoxm2bpjx5i"></i><span>c++</span><div class="collapse show" id="collapse-fxpeoxm2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; (n % <span class="hljs-number">3</span> ? <span class="hljs-string">&quot;First&quot;</span> : <span class="hljs-string">&quot;Second&quot;</span>) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b">B</h2><h3 id="思路-1">思路</h3><p>枚举所有的 <span class="math inline">\(k\)</span>，计算此时的最大差值，记录出现的最大值。 <span class="math inline">\(O(n\log n)\)</span></p><h3 id="code-1">Code</h3><figure class="highlight c++"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ftxzd4m2bpjx5i"></i><span>c++</span><div class="collapse show" id="collapse-ftxzd4m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; v[i];<br><br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">sum</span><span class="hljs-params">(n + <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        sum[i] = sum[i - <span class="hljs-number">1</span>] + v[i];<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            vector&lt;ll&gt; a;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j += i)<br>                a.<span class="hljs-built_in">push_back</span>(sum[j] - sum[j - i]);<br>            ans = <span class="hljs-built_in">max</span>(ans, *<span class="hljs-built_in">max_element</span>(<span class="hljs-built_in">all</span>(a)) - *<span class="hljs-built_in">min_element</span>(<span class="hljs-built_in">all</span>(a)));<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c">C</h2><h3 id="思路-2">思路</h3><p>将数组分为若干个区间，每个区间边界为相邻的奇偶性相同的两个数之间，维护每个区间的最小前缀，可以通过舍弃最小前缀保证当前值是最大值。<spanclass="math inline">\(O(n)\)</span></p><h3 id="code-2">Code</h3><figure class="highlight c++"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-sbq4x3m2bpjx5i"></i><span>c++</span><div class="collapse show" id="collapse-sbq4x3m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; v[i];<br><br>    <span class="hljs-type">int</span> ans = v[<span class="hljs-number">0</span>], sum = v[<span class="hljs-number">0</span>], pre = <span class="hljs-built_in">min</span>(<span class="hljs-number">0</span>, v[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((v[i] + v[i - <span class="hljs-number">1</span>]) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>        &#123;<br>            pre = <span class="hljs-number">0</span>;<br>            sum = <span class="hljs-number">0</span>;<br>        &#125;<br>        sum += v[i];<br>        ans = <span class="hljs-built_in">max</span>(ans, sum - pre);<br>        pre = <span class="hljs-built_in">min</span>(pre, sum);<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d">D</h2><h3 id="思路-3">思路</h3><p>通过对式子的改写，可知满足条件的可能情况为 <spanclass="math inline">\(b_i = b_j\)</span> 或 <spanclass="math inline">\(b_i = 1, b_j = 2\)</span> 或 <spanclass="math inline">\(b_i = 2, b_j = 1\)</span> 。</p><h3 id="code-3">Code</h3><figure class="highlight c++"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-fjrfdym2bpjx5i"></i><span>c++</span><div class="collapse show" id="collapse-fjrfdym2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        ans += mp[a[i]];<br>        <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">1</span>)<br>            ans += mp[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">2</span>)<br>            ans += mp[<span class="hljs-number">1</span>];<br>        mp[a[i]]++;<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e">E</h2><h3 id="思路-4">思路</h3><p>对于这个序列，我们无法对整个序列的最小值以后的数进行操作，若最小值以后的数不满足不递减的顺序，则这次排序是不可能的，反之则输出最小值之前的元素数量。</p><h3 id="code-4">Code</h3><figure class="highlight c++"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-0n5gdam2bpjx5i"></i><span>c++</span><div class="collapse show" id="collapse-0n5gdam2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; v[i];<br><br>    <span class="hljs-type">int</span> pos = <span class="hljs-built_in">min_element</span>(<span class="hljs-built_in">all</span>(v)) - v.<span class="hljs-built_in">begin</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = pos; i &lt; n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v[i] &gt; v[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; pos &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f">F</h2><h3 id="思路-5">思路</h3><p>初始化树为一条链，此时两个叶结点之间的距离为 <spanclass="math inline">\(n-1\)</span> ，每次移动 <spanclass="math inline">\(n\)</span> 结点，使其与链上编号为 <spanclass="math inline">\(d_i\)</span> 的结点相连，此时 <spanclass="math inline">\(n\)</span> 结点与 <spanclass="math inline">\(1\)</span> 结点之间的距离为 <spanclass="math inline">\(d_i\)</span> 。</p><h3 id="code-5">Code</h3><figure class="highlight c++"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-dksvi5m2bpjx5i"></i><span>c++</span><div class="collapse show" id="collapse-dksvi5m2bpjx5i"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) v.begin(), v.end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, q;<br>    cin &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">d</span><span class="hljs-params">(q)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q; i++)<br>        cin &gt;&gt; d[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br>        cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; endl;<br><br>    <span class="hljs-type">int</span> now = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> dis : d)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (dis != now)<br>        &#123;<br>            cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; now &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; dis &lt;&lt; endl;<br>            now = dis;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;-1 -1 -1&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SZTU Monthly 2023 Oct.</title>
    <link href="/archives/471967587/"/>
    <url>/archives/471967587/</url>
    
    <content type="html"><![CDATA[<blockquote><p><ahref="http://acm.sztu.edu.cn/csgoj/contest/problemset?cid=1047">比赛链接</a></p></blockquote><h2 id="写在前面">写在前面</h2><h3 id="题目难度">题目难度：</h3><p>这次比赛难度划分是四道简单题，两道中等题，两道困难题。 <spanclass="math inline">\(HGDF\)</span> 简单题 ， <spanclass="math inline">\(EA\)</span> 中等题， <spanclass="math inline">\(BC\)</span> 困难题。</p><h2 id="a-预测排名">A 预测排名</h2><h3 id="考点">考点：</h3><ul><li>贪心</li><li>模拟</li></ul><h3 id="题解">题解：</h3><p>题目给出了ACM赛制排名的说明，同时给出每个人的过题数量、每题的需要的时间和罚时次数，需要我们输出每个人的排名</p><h3 id="ac-code">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-dwsik7m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-dwsik7m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> t[<span class="hljs-number">111</span>];<br>    <span class="hljs-type">int</span> wa;<br>    <span class="hljs-type">int</span> all;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> rank;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">sort</span>(t, t + m);<br>        <span class="hljs-type">int</span> item = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            item += t[i];<br>            all += item;<br>        &#125;<br>        all += wa;<br>    &#125;<br>&#125; a[<span class="hljs-number">1111</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(node a, node b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a.m != b.m)<br>        <span class="hljs-keyword">return</span> a.m &gt; b.m;<br>    <span class="hljs-keyword">return</span> a.all &lt; b.all;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(node a, node b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.id &lt; b.id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i].m);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i].m; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i].t[j]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i].m; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> wa;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;wa);<br>            a[i].wa += wa * <span class="hljs-number">20</span>;<br>        &#125;<br>        a[i].id = i;<br>        a[i].<span class="hljs-built_in">cal</span>();<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(a, a + n, cmp1);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        a[i].rank = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span> &amp;&amp; a[i].all == a[i - <span class="hljs-number">1</span>].all)<br>            a[i].rank = a[i - <span class="hljs-number">1</span>].rank;<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(a, a + n, cmp2);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i].rank);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="b-三数之积">B 三数之积</h2><h3 id="考点-1">考点：</h3><ul><li>枚举</li></ul><h3 id="题解-1">题解：</h3><p>根据题意，枚举每一种可能即可，注意循环的范围</p><h3 id="ac-code-1">AC Code</h3><p>C</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-dp558zm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-dp558zm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>&#125; ans[N];<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * i * i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % i != <span class="hljs-number">0</span> || i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> t = n / i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j * j &lt; t; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (t % j != <span class="hljs-number">0</span> || j % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> || t / j % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">continue</span>;<br><br>            ans[cnt].a = i;<br>            ans[cnt].b = j;<br>            ans[cnt].c = t / j;<br>            cnt++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, ans[i].a, ans[i].b, ans[i].c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>C++</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-eiyi3om2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-eiyi3om2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    vector&lt;node&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * i * i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % i != <span class="hljs-number">0</span> || i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> t = n / i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j * j &lt; t; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (t % j != <span class="hljs-number">0</span> || j % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> || t / j % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">continue</span>;<br><br>            ans.<span class="hljs-built_in">push_back</span>(&#123;i, j, t / j&#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">empty</span>())<br>        cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : ans)<br>        cout &lt;&lt; it.a &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; it.b &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; it.c &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="c-消灭敌人">C 消灭敌人</h2><h3 id="考点-2">考点：</h3><ul><li>枚举</li></ul><h3 id="题解-2">题解：</h3><p>在一条线上有若干敌人和若干炮台，求敌人离最近的炮台的最大值</p><h3 id="ac-code-2">AC Code</h3><p>解法一 <span class="math inline">\(O(nm)\)</span>：</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-aiua0tm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-aiua0tm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br><br>    <span class="hljs-built_in">sort</span>(a, a + n);<br>    <span class="hljs-built_in">sort</span>(b, b + m);<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> dis = <span class="hljs-number">0x7fffffff</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>            dis = <span class="hljs-built_in">min</span>(dis, <span class="hljs-built_in">abs</span>(a[i] - b[j]));<br>        ans = <span class="hljs-built_in">max</span>(ans, dis);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>解法二 <span class="math inline">\(O(n\log n)\)</span> ：</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-2gmllhm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-2gmllhm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br><br>    <span class="hljs-built_in">sort</span>(a, a + n);<br>    <span class="hljs-built_in">sort</span>(b, b + m);<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!j &amp;&amp; a[i] &lt;= b[j])<br>            ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">abs</span>(a[i] - b[j]));<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == m - <span class="hljs-number">1</span>)<br>            ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">min</span>(<span class="hljs-built_in">abs</span>(a[i] - b[j - <span class="hljs-number">1</span>]), <span class="hljs-built_in">abs</span>(a[i] - b[j])));<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (j &lt; m - <span class="hljs-number">1</span> &amp;&amp; b[j] &lt; a[i])<br>                j++;<br><br>            ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">min</span>(<span class="hljs-built_in">abs</span>(a[i] - b[j - <span class="hljs-number">1</span>]), <span class="hljs-built_in">abs</span>(a[i] - b[j])));<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="d-括号匹配">D 括号匹配</h2><h3 id="考点-3">考点：</h3><ul><li>字符串</li></ul><h3 id="题解-3">题解：</h3><p>用 <span class="math inline">\(cnt\)</span> 计数，每出现左括号 <spanclass="math inline">\(cnt+1\)</span> ，出现右括号 <spanclass="math inline">\(cnt-1\)</span> 。如果出现中途 <spanclass="math inline">\(cnt&lt;0\)</span>即括号不能匹配，最后判断括号是否匹配。</p><h3 id="ac-code-3">AC Code</h3><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-cq7h6cm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-cq7h6cm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(s), cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>            cnt++;<br>        <span class="hljs-keyword">else</span><br>            cnt--;<br>        <span class="hljs-keyword">if</span> (cnt &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="e-求第k个数位">E 求第k个数位</h2><h3 id="考点-4">考点：</h3><ul><li>字符串</li></ul><h3 id="题解-4">题解：</h3><p>将密码本先预处理好，每次直接查询即可</p><h3 id="ac-code-4">AC Code</h3><p>C</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-cbyed4m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-cbyed4m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">char</span> s[N], t[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; s[<span class="hljs-number">100000</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">itoa</span>(i, t, <span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">strcat</span>(s, t);<br>    &#125;<br><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, s[x - <span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>C++</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-nxl04qm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-nxl04qm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; s.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">100000</span>; i++)<br>        s += <span class="hljs-built_in">to_string</span>(i);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        cout &lt;&lt; s[x - <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="f-翻转单词">F 翻转单词</h2><h3 id="考点-5">考点：</h3><ul><li>字符串</li><li>输入？</li></ul><h3 id="题解-5">题解：</h3><p>输入每个单词后倒序输出</p><h3 id="ac-code-5">AC Code</h3><p>C</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-y2oi33m2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-y2oi33m2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">strlen</span>(s) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[i]);<br><br>        n++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>C++</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-50zy9mm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-50zy9mm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; s)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n)<br>            cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>        cout &lt;&lt; s;<br><br>        n++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="g-求数组里的第二大数">G 求数组里的第二大数</h2><h3 id="考点-6">考点：</h3><ul><li>排序</li></ul><h3 id="题解-6">题解：</h3><p>如题，排序后输出数组里的第二大数即可</p><h3 id="ac-code-6">AC Code</h3><p>C</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-qc8kjsm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-qc8kjsm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i] &lt; a[j])<br>            &#123;<br>                <span class="hljs-type">int</span> t = a[i];<br>                a[i] = a[j];<br>                a[j] = t;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i] != a[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            ans = a[i];<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>C++</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-ytfbgcm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-ytfbgcm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br><br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i] != a[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            ans = a[i];<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="h-ab-problem">H A+B Problem</h2><h3 id="考点-7">考点：</h3><ul><li>排序</li></ul><h3 id="题解-7">题解：</h3><p>以十六进制输出 <span class="math inline">\(a+b\)</span> 的结果</p><h3 id="ac-code-7">AC Code</h3><p>解法一：</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-i023ufm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-i023ufm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x&quot;</span>, a + b);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>解法二：</p><figure class="highlight cpp"><i class="iconfont icon-xia-jiantou" type="button" data-toggle="collapse" data-target="#collapse-hr653nm2bpjx5j"></i><span>cpp</span><div class="collapse show" id="collapse-hr653nm2bpjx5j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">char</span> ans[<span class="hljs-number">10</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br><br>    <span class="hljs-type">int</span> c = a + b, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (c)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (c % <span class="hljs-number">16</span> &lt; <span class="hljs-number">10</span>)<br>            ans[cnt] = c % <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">else</span><br>            ans[cnt] = c % <span class="hljs-number">16</span> - <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>        c /= <span class="hljs-number">16</span>;<br>        cnt++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cnt - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, ans[i]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
      <category>题解</category>
      
      <category>SZTU_ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>SZTU_ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
